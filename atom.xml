<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨斌的博客</title>
  
  <subtitle>杨斌的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://y0ngb1n.github.io/"/>
  <updated>2022-11-19T15:46:29.871Z</updated>
  <id>https://y0ngb1n.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes 入门到实践：借助 WireGuard 跨云搭建 K3s 集群环境</title>
    <link href="https://y0ngb1n.github.io/a/setup-k3s-cluster-multicloud-with-wireguard.html"/>
    <id>https://y0ngb1n.github.io/a/setup-k3s-cluster-multicloud-with-wireguard.html</id>
    <published>2022-11-19T23:33:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>最近看从《<a href="https://icloudnative.io/posts/deploy-k3s-cross-public-cloud/" target="_blank" rel="noopener">跨云厂商部署 k3s 集群</a>》这篇文章中找到了又一种可以穷开心的花样玩法，于是乎就有了这篇文章。刚好最近各大云服务商搞起了双 11 活动大促，像腾讯云又可以几十块钱买台三年的小鸡玩了。那么问题来了，每个云服务商只能活动价购买一台，最终我们云主机就分布在不同云服务商上，得不到充分地利用，那么有没有可能将它们整合起来输出算力呢？当然是可以的啦！那就是利用 WireGuard 组网搭建 Kubernetes 集群。</p><p>由于前面提到文章中使用的版本已经过时了，那我就基于现在最新的软件版本按文章的方式开搞吧。</p><p><strong>PS：</strong> 搞完回来了，通过自己动手后发现一个硬道理，有事没事真的要多看软件的官方文档或多水下官方的社区（如 GayHub），其实官方已经提供足够详细的文档，社区里已经有人早过踩过了几种坑了。想要柳暗花明，就多看官方文档吧。</p><h1 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h1><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>Ubuntu</td><td>20.04</td></tr><tr><td>Docker</td><td>20.10</td></tr><tr><td>WireGuard</td><td>v1.0.20200513</td></tr><tr><td>K3s</td><td>v1.23.14+k3s1</td></tr></tbody></table><p>我在腾讯云、Vultr 上准备了几台预装 <code>Ubuntu 20.04</code> 的云主机，当然可以是任意云服务商的云主机，只需具备公网访问、可以运行 Linux 系统即可。</p><table><thead><tr><th>云服务商</th><th>公网 IP</th><th>配置</th><th>节点名称</th><th>节点角色</th><th>OS-IMAGE</th><th>KERNEL-VERSION</th><th>CONTAINER-RUNTIME</th></tr></thead><tbody><tr><td>腾讯云</td><td><a href="http://42.193.XXX.XXX" target="_blank" rel="noopener">42.193.XXX.XXX</a></td><td>4C4G</td><td>k3s-node-01</td><td>control-plane,master</td><td>Ubuntu 20.04 LTS</td><td>5.4.0-96-generic</td><td>docker://20.10.13</td></tr><tr><td>Vultr</td><td>45.63.YYY.YYY</td><td>1C1G</td><td>k3s-node-02</td><td>agent/worker</td><td>Ubuntu 20.04.3 LTS</td><td>5.4.0-131-generic</td><td>docker://20.10.11</td></tr><tr><td>Vultr</td><td>13.22.ZZZ.ZZZ</td><td>1C1G</td><td>k3s-node-03</td><td>agent/worker</td><td>Ubuntu 20.04.5 LTS</td><td>5.4.0-122-generic</td><td>docker://20.10.12</td></tr></tbody></table><h1 id="安装-docker"><a class="markdownIt-Anchor" href="#安装-docker"></a> 安装 Docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt intall docker.io -y</span><br></pre></td></tr></table></figure><h1 id="安装-wireguard"><a class="markdownIt-Anchor" href="#安装-wireguard"></a> 安装 WireGuard</h1><p>需要确保在每个节点上安装 WireGuard 软件，在 <code>Ubuntu 20.04</code> 的安装细节如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换 root 权限</span></span><br><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 WireGuard 软件</span></span><br><span class="line">apt install wireguard resolvconf -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 IPV4 IP 转发</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.ip_forward = 1"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>在这里只需要完成 WireGuard 的正确安装即可，无需配置和启动，其他事情就可以交给 K3s 完成配置组网，我们要做的是尽情使唤 K3s 干活，还要它把活干漂亮。其实 K3s 也早为我们准备好了，只需简单配置启动参数即可。</p><h1 id="跨云搭建-k3s-集群"><a class="markdownIt-Anchor" href="#跨云搭建-k3s-集群"></a> 跨云搭建 K3s 集群</h1><p>由于我的云主机分布在不同的云服务商，所以不能通过服务商的内网环境互相访问，这里需要借助 WireGuard 完成异地组网。由于 K3s 通过 Flannel 已经集成了 WireGuard，所以我们可以通过一些简单的配置即可轻松完成组网。</p><blockquote><p>You need to install WireGuard on every node, both server and agents before attempting to leverage the WireGuard flannel backend option. The <code>wireguard</code> backend will be removed from v1.26 in favor of <code>wireguard-native</code> backend natively from Flannel.</p></blockquote><p>在开始之前建议大家先通读<a href="https://docs.k3s.io/installation/network-options#distributed-hybrid-or-multicloud-cluster" target="_blank" rel="noopener"><strong>官方指引</strong></a>，只有搞清楚了来龙去脉，才能拨开迷雾。其中有提及不同版本的 K3s 配置参数有所差异，值得注意的是从 <code>v1.26</code> 开始启动参数由原先的 <code>flannel-backend: wireguard</code>  变更为  <code>flannel-backend: wireguard-native</code> 。</p><p>我们可以参考上一篇文章《<a href="https://www.notion.so/Kubernetes-K3s-5ffaa8e202234f81910d1fe63ec4aeda" target="_blank" rel="noopener">Kubernetes 入门到实践：搭建 K3s 集群初体验</a> 》中的部署命令。</p><h2 id="安装-k3s-server"><a class="markdownIt-Anchor" href="#安装-k3s-server"></a> 安装 K3s Server</h2><p>在启动每个 Server 时需要额外增加以下启动参数，便可激活 WireGuard：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-node-external-ip &lt;SERVER_EXTERNAL_IP&gt; --flannel-backend wireguard-native --flannel-external-ip</span><br></pre></td></tr></table></figure><p>K3s Server 完整的启动过程如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定 K3s 版本</span></span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_VERSION=v1.23.14+k3s1</span><br><span class="line"><span class="comment"># 只安装不启动</span></span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_SKIP_START=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 为您添加到集群的每个节点设计一个独特的名称：https://docs.rancher.cn/docs/k3s/installation/installation-requirements/_index#先决条件</span></span><br><span class="line"><span class="built_in">export</span> K3S_NODE_NAME=k3s-node-01</span><br><span class="line"><span class="comment"># 获取节点的公网 IP，或手动设置</span></span><br><span class="line"><span class="built_in">export</span> PUBLIC_IP=`curl -sSL https://ipconfig.sh`</span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># 自定义启动执行命令：</span></span><br><span class="line"><span class="comment"># --docker：启用 Docker 运行时</span></span><br><span class="line"><span class="comment"># --disable servicelb：（可选）禁用 servicelb</span></span><br><span class="line"><span class="comment"># --disable traefik：（可选）禁用 traefik</span></span><br><span class="line"><span class="comment"># --node-ip $PUBLIC_IP --node-external-ip $PUBLIC_IP：设置节点的公网 IP，节点间使用公网 IP 组网通信</span></span><br><span class="line"><span class="comment"># --flannel-backend wireguard-native --flannel-external-ip：启用 Flannel CNI 并使用 WireGuard 组网</span></span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_EXEC=<span class="string">"--docker --disable servicelb --disable traefik --node-ip <span class="variable">$PUBLIC_IP</span> --node-external-ip <span class="variable">$PUBLIC_IP</span> --flannel-backend wireguard-native --flannel-external-ip"</span></span><br><span class="line"><span class="comment"># 使用阿里云镜像源脚本安装</span></span><br><span class="line">curl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br><span class="line"><span class="comment"># 手动启动 K3s 服务，由于上面已配置 INSTALL_K3S_SKIP_START=true</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now k3s</span><br><span class="line"><span class="comment"># 查看 K3s 服务状态</span></span><br><span class="line">systemctl status k3s</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 metrics-server 运行日志，方便定位问题</span></span><br><span class="line">kubectl logs -f  pod/metrics-server-5bb8d5f679-btt96 -n kube-system</span><br></pre></td></tr></table></figure><h2 id="安装-k3s-agent"><a class="markdownIt-Anchor" href="#安装-k3s-agent"></a> 安装 K3s Agent</h2><p>在启动每个 Agent 时需要额外增加以下启动参数，便可激活 WireGuard：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-node-external-ip &lt;AGENT_EXTERNAL_IP&gt;</span><br></pre></td></tr></table></figure><p>K3s Agent 完整的启动过程如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本参数与 Server 启动参数保持一致</span></span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_VERSION=v1.23.14+k3s1</span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_SKIP_START=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 只需要配置 Agent 特定的参数即可</span></span><br><span class="line"><span class="built_in">export</span> K3S_NODE_NAME=k3s-node-02</span><br><span class="line"><span class="built_in">export</span> PUBLIC_IP=`curl -sSL https://ipconfig.sh`</span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_EXEC=<span class="string">"--docker --node-ip <span class="variable">$PUBLIC_IP</span> --node-external-ip <span class="variable">$PUBLIC_IP</span>"</span></span><br><span class="line"><span class="comment"># 设置了 K3S_URL，它将默认为“agent”。如果未设置 K3S_URL，它将默认为“server”</span></span><br><span class="line"><span class="built_in">export</span> K3S_URL=</span><br><span class="line"><span class="comment"># 用于将 server 或 agent 加入集群的共享 secret</span></span><br><span class="line"><span class="comment"># 在主节点上获取：cat /var/lib/rancher/k3s/server/node-token</span></span><br><span class="line"><span class="built_in">export</span> K3S_TOKEN=K105a308b09e583fccd1dd3a11745826736d440577d1fafa5d9dbaf5213a7150f5f::server:88e21efdad8965816b1da61e056ac7c4</span><br><span class="line"><span class="comment"># 由于我的节点在 Vultr 上，这里走官方源脚本安装，国内的主机仍可使用阿里云镜像源脚本安装</span></span><br><span class="line"><span class="comment"># curl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span></span><br><span class="line">curl -sfL https://get.k3s.io | sh -</span><br><span class="line"><span class="comment"># 手动启动 K3s 服务，由于上面已配置 INSTALL_K3S_SKIP_START=true</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now k3s-agent</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 K3s 服务状态</span></span><br><span class="line">$ systemctl status k3s-agent</span><br><span class="line">● k3s-agent.service - Lightweight Kubernetes</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/k3s-agent.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Sat 2022-11-19 12:23:59 UTC; 50s ago</span><br><span class="line">       Docs: https://k3s.io</span><br><span class="line">    Process: 707474 ExecStartPre=/bin/sh -xc ! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service (code=exited, status=0/SUCCESS)</span><br><span class="line">    Process: 707476 ExecStartPre=/sbin/modprobe br_netfilter (code=exited, status=0/SUCCESS)</span><br><span class="line">    Process: 707477 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 707478 (k3s-agent)</span><br><span class="line">      Tasks: 14</span><br><span class="line">     Memory: 255.6M</span><br><span class="line">     CGroup: /system.slice/k3s-agent.service</span><br><span class="line">             └─707478 /usr/<span class="built_in">local</span>/bin/k3s agent</span><br><span class="line"></span><br><span class="line">Nov 19 12:23:59 vultr k3s[707478]: I1119 12:23:59.986059  707478 network_policy_controller.go:163] Starting network policy controller</span><br><span class="line">Nov 19 12:24:00 vultr k3s[707478]: I1119 12:24:00.057408  707478 network_policy_controller.go:175] Starting network policy controller full sync goroutine</span><br><span class="line">Nov 19 12:24:00 vultr k3s[707478]: I1119 12:24:00.698216  707478 kube.go:133] Node controller sync successful</span><br><span class="line">Nov 19 12:24:00 vultr k3s[707478]: I1119 12:24:00.702931  707478 kube.go:331] Overriding public ip with <span class="string">'45.63.XXX.XXX'</span> from node annotation <span class="string">'flannel.alpha.coreos.com/public-ip-overwrite'</span></span><br><span class="line">Nov 19 12:24:00 vultr k3s[707478]: time=<span class="string">"2022-11-19T12:24:00Z"</span> level=info msg=<span class="string">"Wrote flannel subnet file to /run/flannel/subnet.env"</span></span><br><span class="line">Nov 19 12:24:00 vultr k3s[707478]: time=<span class="string">"2022-11-19T12:24:00Z"</span> level=info msg=<span class="string">"Running flannel backend."</span></span><br><span class="line">Nov 19 12:24:00 vultr k3s[707478]: I1119 12:24:00.865979  707478 wireguard_network.go:78] Watching <span class="keyword">for</span> new subnet leases</span><br><span class="line">Nov 19 12:24:00 vultr k3s[707478]: I1119 12:24:00.866258  707478 wireguard_network.go:172] Subnet added: 10.42.0.0/24 via 42.193.XXX.XXX:51820</span><br><span class="line">Nov 19 12:24:00 vultr k3s[707478]: I1119 12:24:00.956299  707478 iptables.go:260] bootstrap <span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看集群节点信息，会发现 k3s-node-02 的 INTERNAL-IP 为公网 IP</span></span><br><span class="line">$ kubectl get nodes -owide</span><br><span class="line">NAME          STATUS   ROLES                  AGE   VERSION         INTERNAL-IP     EXTERNAL-IP      OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME</span><br><span class="line">k3s-node-01   Ready    control-plane,master   19m   v1.23.14+k3s1   10.0.20.12      42.193.XXX.XXX   Ubuntu 20.04 LTS     5.4.0-96-generic    docker://20.10.13</span><br><span class="line">k3s-node-02   Ready    &lt;none&gt;                 14m   v1.23.14+k3s1   45.63.YYY.YYY   45.63.YYY.YYY    Ubuntu 20.04.3 LTS   5.4.0-131-generic   docker://20.10.11</span><br></pre></td></tr></table></figure><h2 id="关于-metrics-server-问题"><a class="markdownIt-Anchor" href="#关于-metrics-server-问题"></a> 关于 <strong>metrics-server 问题</strong></h2><p><code>metrics-server</code><br>  无法获取指标，是由于<code>kubelet-preferred-address-types</code><br>值首选是 InternalIP，而云服务器的 InternalIP 为内网 IP，不同云厂商的内网 IP 段不同，无法通讯</p><p>问题就是 <code>metrics-server</code> 无法获取 CPU、内存等利用率核心指标，需要人工干预下配置。在刚发布的新版本 *<strong>*<a href="https://github.com/k3s-io/k3s/releases/tag/v1.23.14%2Bk3s1" target="_blank" rel="noopener">v1.23.14+k3s1</a>**</strong> 中修正了启用 <code>flannel-external-ip=true</code> 选项后会动态调整 <code>-kubelet-preferred-address-types=ExternalIP,InternalIP,Hostname</code> 地址的优先级顺序。</p><p>下面将展开说说这个特性的调整对 K3s 集群的影响：</p><h3 id="在-v12313k3s1-版本及更旧的版本"><a class="markdownIt-Anchor" href="#在-v12313k3s1-版本及更旧的版本"></a> <strong>在 v1.23.13+k3s1 版本及更旧的版本</strong></h3><p>查看下默认配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无法获取 CPU、内存等利用率核心指标</span></span><br><span class="line">$ kubectl top node</span><br><span class="line">Error from server (ServiceUnavailable): the server is currently unable to handle the request (get nodes.metrics.k8s.io)</span><br><span class="line"></span><br><span class="line">$ kubectl top node</span><br><span class="line">NAME          CPU(cores)   CPU%        MEMORY(bytes)   MEMORY%</span><br><span class="line">k3s-node-01   133m         3%          2232Mi          56%</span><br><span class="line">k3s-node-02   &lt;unknown&gt;    &lt;unknown&gt;   &lt;unknown&gt;       &lt;unknown&gt;</span><br><span class="line"></span><br><span class="line">$ kubectl describe pod/metrics-server-d76965d8f-t2sll -n kube-system | grep -i types</span><br><span class="line">      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br></pre></td></tr></table></figure><p>需要修改 <code>metrics-server</code> 的 manifests，使用以下命令在线编辑 <code>metrics-server</code> 的 manifests：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system edit deploy metrics-server</span><br></pre></td></tr></table></figure><p>调整以下执行参数后保存退出：</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - args:</span><br><span class="line">        - --cert-dir=/tmp</span><br><span class="line">        - --secure-port=10250</span><br><span class="line"><span class="deletion">-       - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span><br><span class="line"><span class="addition">+       - --kubelet-preferred-address-types=ExternalIP</span></span><br><span class="line">        - --kubelet-insecure-tls</span><br><span class="line">        - --kubelet-use-node-status-port</span><br><span class="line">        - --metric-resolution=15s</span><br></pre></td></tr></table></figure><p>保存后稍等资源重新调度后，这样就可以让 metrics-server 使用公网 IP 来和 node 通信了。重新查看核心指标：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl top node</span><br><span class="line">NAME          CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class="line">k3s-node-01   259m         6%     2269Mi          57%</span><br><span class="line">k3s-node-02   203m         20%    534Mi           54%</span><br><span class="line"></span><br><span class="line">$ kubectl top pods -A</span><br><span class="line">NAMESPACE     NAME                                      CPU(cores)   MEMORY(bytes)</span><br><span class="line">default       nginx-85b98978db-659cl                    0m           5Mi</span><br><span class="line">default       nginx-85b98978db-tt2hh                    0m           5Mi</span><br><span class="line">default       nginx-85b98978db-zr47g                    0m           2Mi</span><br><span class="line">kube-system   coredns-d76bd69b-k8949                    4m           15Mi</span><br><span class="line">kube-system   <span class="built_in">local</span>-path-provisioner-6c79684f77-nc2xn   1m           7Mi</span><br><span class="line">kube-system   metrics-server-d76965d8f-t2sll            6m           25Mi</span><br></pre></td></tr></table></figure><h3 id="在-v12314k3s1-版本及更新的版本"><a class="markdownIt-Anchor" href="#在-v12314k3s1-版本及更新的版本"></a> <strong>在 <a href="https://github.com/k3s-io/k3s/releases/tag/v1.23.14%2Bk3s1" target="_blank" rel="noopener">v1.23.14+k3s1</a> 版本及更新的版本</strong></h3><ul><li><a href="https://github.com/k3s-io/k3s/pull/6435" target="_blank" rel="noopener">[Release 1.23] Change the priority of address types depending on flannel-external-ip</a></li><li><a href="https://github.com/k3s-io/k3s/issues/6429" target="_blank" rel="noopener">[Release 1.23] Change addr types in metrics server</a></li></ul><ol><li>Describe <code>pod/metrics-server-</code>, look for ARGS and check those scenarios:<code>-kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</code>when <code>flannel-external-ip=false</code></li><li>Do same steps just change <code>flannel-external-ip: true</code> and look for<code>-kubelet-preferred-address-types=ExternalIP,InternalIP,Hostname</code>when <code>flannel-external-ip=true</code></li></ol><h2 id="️-注意事项-️"><a class="markdownIt-Anchor" href="#️-注意事项-️"></a> ⚠️  注意事项 ⚠️</h2><p>（不要问为什么，你试试）</p><ul><li><strong>安全组防火墙需要放行相关端口</strong><ul><li><code>TCP 6443</code>：K3s Server 端口</li><li><code>TCP 10250</code>：<code>metrics-server</code> 服务端口，用于 K3s Server 与 Agent 通信收集指标，否则会无法获取 CPU、内存等利用率核心指标</li><li><code>UDP 51820</code>：开启 <code>flannel-backend: wireguard-native</code> 默认端口，Flannel 后端使用 WireGuard 的端口</li><li><code>TCP 30000-32767</code>：K8s NodePort 范围，方便外网调试</li></ul></li><li><strong>选配启动参数</strong><ul><li><code>--tls-san</code><ul><li>在 TLS 证书中添加其他主机名或 IP 作为主机备用名称</li><li>即在公网环境下允许通过公网 IP 访问控制、操作远程集群</li><li>或者部署多个 Server 并使用 LB 进行负责，就需要保留公网地址</li></ul></li><li><code>--disable servicelb</code></li><li><code>--disable traefik</code></li></ul></li><li><strong>禁用未使用上的组件，节约性能</strong><ul><li><a href="https://docs.rancher.cn/docs/k3s/networking/_index#service-load-balancer" target="_blank" rel="noopener">Service Load Balancer</a><ul><li><code>K3s</code>  提供了一个名为  <code>Klipper Load Balancer</code>的负载均衡器，它可以使用可用的主机端口。 允许创建  <code>LoadBalancer</code>  类型的  <code>Service</code>，但不包括  <code>LB</code>  的实现。某些  <code>LB</code>  服务需要云提供商，例如  <code>Amazon EC2</code>。相比之下，<code>K3s service LB</code>使得可以在没有云提供商的情况下使用  <code>LB</code>  服务。</li><li>要禁用嵌入式 LB，请使用 <code>--disable servicelb</code> 选项启动每个 Server。</li></ul></li><li><a href="https://docs.rancher.cn/docs/k3s/networking/_index#traefik-ingress-controller" target="_blank" rel="noopener">Traefik Ingress Controller</a><ul><li><a href="https://traefik.io/" target="_blank" rel="noopener">Traefik</a> 是一个现代的 HTTP 反向代理和负载均衡器。启动 Server 时，默认情况下会部署 Traefik。Traefik ingress controller 将使用主机上的 80 和 443 端口（即这些端口不能用于 HostPort 或 NodePort）。</li><li>要禁用它，请使用 <code>--disable traefik</code> 选项启动每个 server。</li></ul></li></ul></li></ul><h1 id="验证-k3s-跨云集群及网络"><a class="markdownIt-Anchor" href="#验证-k3s-跨云集群及网络"></a> 验证 K3s 跨云集群及网络</h1><h2 id="验证跨云集群"><a class="markdownIt-Anchor" href="#验证跨云集群"></a> 验证跨云集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get nodes -owide</span><br><span class="line">NAME          STATUS   ROLES                  AGE   VERSION         INTERNAL-IP     EXTERNAL-IP      OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME</span><br><span class="line">k3s-node-01   Ready    control-plane,master   69m   v1.23.14+k3s1   10.0.20.12      42.193.XXX.XXX   Ubuntu 20.04 LTS     5.4.0-96-generic    docker://20.10.13</span><br><span class="line">k3s-node-02   Ready    &lt;none&gt;                 63m   v1.23.14+k3s1   45.63.XXX.XXX   45.63.YYY.YYY    Ubuntu 20.04.3 LTS   5.4.0-131-generic   docker://20.10.11</span><br><span class="line">k3s-node-03   Ready    &lt;none&gt;                 16m   v1.23.14+k3s1   13.22.ZZZ.ZZZ   13.22.ZZZ.ZZZ    Ubuntu 20.04.5 LTS   5.4.0-122-generic   docker://20.10.12</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create deploy whoami --image=traefik/whoami --replicas=3</span><br><span class="line">deployment.apps/whoami created</span><br><span class="line"></span><br><span class="line">$ kubectl get pod -owide</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE   IP          NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">whoami-84d974bbd6-57bnt   1/1     Running   0          10m   10.42.1.4   k3s-node-02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">whoami-84d974bbd6-hlhdq   1/1     Running   0          10m   10.42.2.2   k3s-node-03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">whoami-84d974bbd6-g894t   1/1     Running   0          10m   10.42.0.6   k3s-node-01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">$ kubectl create deploy nginx --image=nginx --replicas=3</span><br><span class="line">deployment.apps/nginx created</span><br><span class="line"></span><br><span class="line">$ kubectl get pod -owide</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE   IP           NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">whoami-84d974bbd6-hlhdq   1/1     Running   0          82m   10.42.2.2    k3s-node-03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">whoami-84d974bbd6-g894t   1/1     Running   0          82m   10.42.0.6    k3s-node-01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">whoami-84d974bbd6-57bnt   1/1     Running   0          82m   10.42.1.4    k3s-node-02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-85b98978db-ptvcb    1/1     Running   0          32s   10.42.1.5    k3s-node-02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-85b98978db-m2nlm    1/1     Running   0          32s   10.42.2.3    k3s-node-03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-85b98978db-fs8gk    1/1     Running   0          32s   10.42.0.17   k3s-node-01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="验证跨云网络"><a class="markdownIt-Anchor" href="#验证跨云网络"></a> 验证跨云网络</h2><p>通过集群内置的 CoreDNS、Service、Pod 相互间调试网络，验证不同节点的网络是否可达。</p><p>开始前先快速创建一个名为 <code>whoami</code> 的 Service：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl expose deploy whoami --<span class="built_in">type</span> LoadBalancer --port 80 --external-ip 42.193.XXX.XXX</span><br><span class="line">service/whoami exposed</span><br><span class="line"></span><br><span class="line">$ kubectl get svc -owide</span><br><span class="line">NAME         TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)        AGE   SELECTOR</span><br><span class="line">kubernetes   ClusterIP      10.43.0.1      &lt;none&gt;           443/TCP        75m   &lt;none&gt;</span><br><span class="line">whoami       LoadBalancer   10.43.77.192   42.193.XXX.XXX   80:32064/TCP   12s   app=whoami</span><br><span class="line"></span><br><span class="line">$ kubectl describe svc whoami</span><br><span class="line">Name:                     whoami</span><br><span class="line">Namespace:                default</span><br><span class="line">Labels:                   app=whoami</span><br><span class="line">Annotations:              &lt;none&gt;</span><br><span class="line">Selector:                 app=whoami</span><br><span class="line">Type:                     LoadBalancer</span><br><span class="line">IP Family Policy:         SingleStack</span><br><span class="line">IP Families:              IPv4</span><br><span class="line">IP:                       10.43.77.192</span><br><span class="line">IPs:                      10.43.77.192</span><br><span class="line">External IPs:             42.193.XXX.XXX</span><br><span class="line">Port:                     &lt;<span class="built_in">unset</span>&gt;  80/TCP</span><br><span class="line">TargetPort:               80/TCP</span><br><span class="line">NodePort:                 &lt;<span class="built_in">unset</span>&gt;  32064/TCP</span><br><span class="line">Endpoints:                10.42.0.6:80,10.42.1.4:80,10.42.2.2:80</span><br><span class="line">Session Affinity:         None</span><br><span class="line">External Traffic Policy:  Cluster</span><br><span class="line">Events:                   &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="那怎么测试-service-的负载均衡效果呢"><a class="markdownIt-Anchor" href="#那怎么测试-service-的负载均衡效果呢"></a> 那怎么测试 Service 的负载均衡效果呢？</h3><p>因为 Service、Pod 的 IP 地址都是 Kubernetes 集群的内部网段，所以我们需要用 <code>kubectl exec</code> 进入到 Pod 内部（或者 ssh 登录到集群的任一节点），再通过 curl 等工具来访问 Service。</p><p>得助于集群内置的 CoreDNS，我们可以在集群内部通过域名的方式访问相应的 Service、Pod：</p><ul><li>Service 对象的域名完全形式是“<strong>对象.名字空间.svc.cluster.local</strong>”，但很多时候也可以省略后面的部分，直接写“<strong>对象.名字空间</strong>”甚至“<strong>对象</strong>”就足够了，默认会使用对象所在的名字空间（比如这里就是 <code>default</code>）<ul><li>比如 <code>whoami</code>、<code>whoami.default</code> 等</li></ul></li><li>Kubernetes 也为每个 Pod 分配了域名，形式是“<strong>IP 地址.名字空间.pod.cluster.local</strong>”，但需要把 IP 地址里的 <code>.</code> 改成 <code>-</code><ul><li>比如 <code>10.42.2.2</code>，它对应的域名就是 <code>10-42-2-2.default.pod</code></li></ul></li></ul><p>这样我们就无需再关心 Service、Pod 对象的 IP 地址，只需要知道它的名字，就可以用 DNS 的方式去访问后端服务了。</p><h3 id="通过外网访问"><a class="markdownIt-Anchor" href="#通过外网访问"></a> 通过外网访问</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://42.193.XXX.XXX:32064</span><br><span class="line">Hostname: whoami-84d974bbd6-57bnt</span><br><span class="line">IP: 127.0.0.1</span><br><span class="line">IP: 10.42.1.4</span><br><span class="line">RemoteAddr: 10.42.0.0:42897</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 42.193.XXX.XXX:32064</span><br><span class="line">User-Agent: curl/7.68.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line">$ curl http://42.193.XXX.XXX:32064</span><br><span class="line">Hostname: whoami-84d974bbd6-hlhdq</span><br><span class="line">IP: 127.0.0.1</span><br><span class="line">IP: 10.42.2.2</span><br><span class="line">RemoteAddr: 10.42.0.0:3478</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 42.193.XXX.XXX:32064</span><br><span class="line">User-Agent: curl/7.68.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line">$ curl http://42.193.XXX.XXX:32064</span><br><span class="line">Hostname: whoami-84d974bbd6-g894t</span><br><span class="line">IP: 127.0.0.1</span><br><span class="line">IP: 10.42.0.6</span><br><span class="line">RemoteAddr: 10.42.0.1:3279</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 42.193.XXX.XXX:32064</span><br><span class="line">User-Agent: curl/7.68.0</span><br><span class="line">Accept: */*</span><br></pre></td></tr></table></figure><p>通过外网访问 Service，经过多次请求后，可以发现从主节点 <code>[http://42.193.XXX.XXX:32064](http://42.193.XXX.XXX:32064)</code> 作为访问入口，可以负载到不同节点上的 Pod 并正确响应了。</p><h3 id="通过集群各节点访问-service-cluster-ip"><a class="markdownIt-Anchor" href="#通过集群各节点访问-service-cluster-ip"></a> 通过集群各节点访问 Service <code>CLUSTER-IP</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k3s-node-01:~<span class="comment"># curl 10.43.77.192:80</span></span><br><span class="line">Hostname: whoami-84d974bbd6-g894t</span><br><span class="line">IP: 127.0.0.1</span><br><span class="line">IP: 10.42.0.6</span><br><span class="line">RemoteAddr: 10.42.0.1:22291</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 10.43.77.192</span><br><span class="line">User-Agent: curl/7.68.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line">root@k3s-node-01:~<span class="comment"># curl 10.43.77.192:80</span></span><br><span class="line">Hostname: whoami-84d974bbd6-57bnt</span><br><span class="line">IP: 127.0.0.1</span><br><span class="line">IP: 10.42.1.4</span><br><span class="line">RemoteAddr: 10.42.0.0:23957</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 10.43.77.192</span><br><span class="line">User-Agent: curl/7.68.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line">root@k3s-node-01:~<span class="comment"># curl 10.43.77.192:80</span></span><br><span class="line">Hostname: whoami-84d974bbd6-hlhdq</span><br><span class="line">IP: 127.0.0.1</span><br><span class="line">IP: 10.42.2.2</span><br><span class="line">RemoteAddr: 10.42.0.0:26130</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 10.43.77.192</span><br><span class="line">User-Agent: curl/7.68.0</span><br><span class="line">Accept: */*</span><br></pre></td></tr></table></figure><p>通过节点间直接访问 Service，经过多次请求后，也可以正常负载到不同节点上的 Pod 并正确响应了。</p><h3 id="从集群内部访问-service-pod"><a class="markdownIt-Anchor" href="#从集群内部访问-service-pod"></a> 从集群内部访问 Service、Pod</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it nginx-85b98978db-ptvcb -- sh</span><br><span class="line"><span class="comment"># curl whoami</span></span><br><span class="line">Hostname: whoami-84d974bbd6-g894t</span><br><span class="line">IP: 127.0.0.1</span><br><span class="line">IP: 10.42.0.6</span><br><span class="line">RemoteAddr: 10.42.1.5:36010</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: whoami</span><br><span class="line">User-Agent: curl/7.74.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl whoami.default</span></span><br><span class="line">Hostname: whoami-84d974bbd6-57bnt</span><br><span class="line">IP: 127.0.0.1</span><br><span class="line">IP: 10.42.1.4</span><br><span class="line">RemoteAddr: 10.42.1.5:33050</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: whoami.default</span><br><span class="line">User-Agent: curl/7.74.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl whoami.default.svc.cluster.local</span></span><br><span class="line">Hostname: whoami-84d974bbd6-hlhdq</span><br><span class="line">IP: 127.0.0.1</span><br><span class="line">IP: 10.42.2.2</span><br><span class="line">RemoteAddr: 10.42.1.5:57358</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: whoami.default.svc.cluster.local</span><br><span class="line">User-Agent: curl/7.74.0</span><br><span class="line">Accept: */*</span><br></pre></td></tr></table></figure><p>经过多方面的网络验证，证明使用 Flannal 集成 WireGuard 的多云组网环境是可用的，可以放心玩耍了。</p><h1 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h1><ul><li><a href="https://docs.k3s.io/" target="_blank" rel="noopener">K3s 官方文档 - 英文</a></li><li><a href="https://docs.rancher.cn/k3s/" target="_blank" rel="noopener">K3s 官方文档 - 中文</a></li><li><a href="https://www.escapelife.site/posts/754ba85c.html" target="_blank" rel="noopener">https://www.escapelife.site/posts/754ba85c.html</a></li><li><a href="https://docs.k3s.io/installation/network-options#distributed-hybrid-or-multicloud-cluster" target="_blank" rel="noopener">https://docs.k3s.io/installation/network-options#distributed-hybrid-or-multicloud-cluster</a></li><li><a href="https://github.com/k3s-io/k3s/issues/5101" target="_blank" rel="noopener">https://github.com/k3s-io/k3s/issues/5101</a></li><li><a href="https://www.netmaker.org/blog/deploy-distributed-kubernetes-clusters-with-wireguard-and-netmaker" target="_blank" rel="noopener">https://www.netmaker.org/blog/deploy-distributed-kubernetes-clusters-with-wireguard-and-netmaker</a></li><li><a href="https://icloudnative.io/posts/deploy-k3s-cross-public-cloud/" target="_blank" rel="noopener">https://icloudnative.io/posts/deploy-k3s-cross-public-cloud/</a></li><li><a href="https://blog.csdn.net/wq1205750492/article/details/124883196" target="_blank" rel="noopener">https://blog.csdn.net/wq1205750492/article/details/124883196</a></li><li><a href="https://icloudnative.io/posts/use-wireguard-as-kubernetes-cni/" target="_blank" rel="noopener">https://icloudnative.io/posts/use-wireguard-as-kubernetes-cni/</a></li><li><a href="https://www.wireguard.com/install/" target="_blank" rel="noopener">https://www.wireguard.com/install/</a></li><li><a href="https://gitee.com/spoto/wireguard" target="_blank" rel="noopener">https://gitee.com/spoto/wireguard</a></li><li><a href="https://www.inovex.de/de/blog/how-to-set-up-a-k3s-cluster-on-wireguard/" target="_blank" rel="noopener">https://www.inovex.de/de/blog/how-to-set-up-a-k3s-cluster-on-wireguard/</a></li><li><a href="https://cloud.tencent.com/developer/article/1985806" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1985806</a></li><li>▶️ <a href="https://b23.tv/EHKAM7s" target="_blank" rel="noopener">https://b23.tv/EHKAM7s</a></li><li>▶️ <a href="https://youtu.be/z2jvlFVU3dw" target="_blank" rel="noopener">https://youtu.be/z2jvlFVU3dw</a></li><li>▶️ <a href="https://youtu.be/x1IF2XO051U" target="_blank" rel="noopener">https://youtu.be/x1IF2XO051U</a></li></ul><hr><p>原文地址：<a href="https://y0ngb1n.github.io/a/setup-k3s-cluster-multicloud-with-wireguard.html">https://y0ngb1n.github.io/a/setup-k3s-cluster-multicloud-with-wireguard.html</a></p><p>如果你觉得内容还算实用，欢迎点赞分享给你的朋友，在此谢过。</p><p>如果你想更快的看到后续内容的更新，请戳 “<strong>点赞</strong>”、“<strong>分享</strong>”、“<strong>喜欢</strong>”，这些免费的鼓励将会影响后续有关内容的更新速度。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#写在前面&quot;&gt;&lt;/a&gt; 写在前面&lt;/h1&gt;
&lt;p&gt;最近看从《&lt;a href=&quot;https://icloudnative.io/posts/deploy-k3s-cross-publi
      
    
    </summary>
    
    
    
      <category term="k8s" scheme="https://y0ngb1n.github.io/tags/k8s/"/>
    
      <category term="kubernetes" scheme="https://y0ngb1n.github.io/tags/kubernetes/"/>
    
      <category term="k3s" scheme="https://y0ngb1n.github.io/tags/k3s/"/>
    
      <category term="wireguard" scheme="https://y0ngb1n.github.io/tags/wireguard/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 入门到实践：搭建 K3s 集群初体验</title>
    <link href="https://y0ngb1n.github.io/a/setup-k3s-cluster-with-docker.html"/>
    <id>https://y0ngb1n.github.io/a/setup-k3s-cluster-with-docker.html</id>
    <published>2022-11-16T21:12:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实践环境"><a class="markdownIt-Anchor" href="#实践环境"></a> 实践环境</h1><ul><li>Ubuntu 22.04</li><li>Docker 20.10.13</li><li><a href="https://github.com/k3s-io/k3s/releases/tag/v1.23.13%2Bk3s1" target="_blank" rel="noopener">K3s v1.23.13+k3s1</a></li></ul><p>本文将使用 Ubuntu 系统，如选择 Centos 系统，亦可作为参考，其步骤与命令大同小异，万变不离其宗。</p><blockquote><p>本文首发于：<a href="https://github.com/y0ngb1n/y0ngb1n.github.io" target="_blank" rel="noopener">https://github.com/y0ngb1n/y0ngb1n.github.io</a></p></blockquote><h1 id="安装-docker"><a class="markdownIt-Anchor" href="#安装-docker"></a> 安装 Docker</h1><p><a href="https://docs.rancher.cn/docs/k3s/advanced/_index/#%E4%BD%BF%E7%94%A8-docker-%E4%BD%9C%E4%B8%BA%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6" target="_blank" rel="noopener">K3s 包含并默认为 containerd， 一个行业标准的容器运行时。</a>本文将使用 Docker 作为容器运行时，需要提前安装 Docker 环境。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换 root 用户</span></span><br><span class="line">sudo su -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker</span></span><br><span class="line">apt install docker.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 docker daemon</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now docker</span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证 docker 环境</span></span><br><span class="line">docker version &amp;&amp; docker info</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>后续启动 K3s 时使用<code>--docker</code> 选项激活。参考<a href="https://docs.rancher.cn/docs/k3s/advanced/_index/#%E4%BD%BF%E7%94%A8-docker-%E4%BD%9C%E4%B8%BA%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6" target="_blank" rel="noopener">使用 Docker 作为容器运行时</a>文档。</p><h1 id="安装-k3s"><a class="markdownIt-Anchor" href="#安装-k3s"></a> 安装 K3s</h1><blockquote><p><a href="https://github.com/k3s-io/k3s" target="_blank" rel="noopener">Lightweight Kubernetes. Production ready, easy to install, half the memory, all in a binary less than 100 MB.</a></p></blockquote><p>K3s 是一个高可用的、经过 CNCF 认证的轻量级 Kubernetes 发行版，专为物联网及边缘计算设计。</p><p><img src="https://cdn.jsdelivr.net/gh/y0ngb1n/image-hosting-01/images/2022-11-16-21-30-BCB83DF4.png" alt=""></p><p><code>k3s</code>  将安装 Kubernetes 所需的一切打包进仅有  <code>60MB</code> 大小的二进制文件中，并且完全实现了 Kubernetes API。为了减少运行 Kubernetes 所需的内存，<code>k3s</code> 删除了很多不必要的驱动程序，并用附加组件对其进行替换。由于它只需要极低的资源就可以运行，因此它能够在任何  <code>512MB</code>  内存以上的设备上运行集群。</p><p>我们先从简单的 K3s 上手，体验下 K8s 的一半 K3s。待 K3s 大法修炼成功后，我们再采用 <a href="https://github.com/kubernetes/kubeadm" target="_blank" rel="noopener">kubeadm</a> 进行部署高可用 Kubernetes 集群，其部署架构几乎一样，只是个别核心组件的变化，万变不离其宗，可依葫芦画瓢。</p><h2 id="方案一一键安装官方源需外网"><a class="markdownIt-Anchor" href="#方案一一键安装官方源需外网"></a> 方案一：一键安装（官方源，需外网）</h2><p>因 K3s 的核心组件镜像需从 <a href="http://gcr.io" target="_blank" rel="noopener">gcr.io</a> 拉取（国内网络不通），所以需具备外网访问的环境，适用于服务器均在国外的环境选用，简单粗暴一键安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一键默认安装</span></span><br><span class="line">curl -sfL https://get.k3s.io | sh -</span><br></pre></td></tr></table></figure><h2 id="方案二一键安装国内源推荐"><a class="markdownIt-Anchor" href="#方案二一键安装国内源推荐"></a> 方案二：一键安装（国内源）推荐</h2><p>国内用户，可以使用以下方法加速安装，内置阿里云镜像源：</p><ul><li><a href="https://docs.rancher.cn/docs/k3s/installation/install-options/_index" target="_blank" rel="noopener">https://docs.rancher.cn/docs/k3s/installation/install-options/_index</a></li><li><a href="https://b23.tv/iGpYZQn" target="_blank" rel="noopener">https://b23.tv/iGpYZQn</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定 K3s 版本</span></span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_VERSION=v1.23.13+k3s1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义启动执行命令</span></span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_EXEC=<span class="string">"--docker"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只安装不启动</span></span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_SKIP_START=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://docs.rancher.cn/docs/k3s/installation/installation-requirements/_index#先决条件</span></span><br><span class="line"><span class="comment"># 为您添加到集群的每个节点设计一个独特的名称</span></span><br><span class="line"><span class="built_in">export</span> K3S_NODE_NAME=k3s-node-01</span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># agent 需加上，其他保持一致</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># 设置了 K3S_URL，它将默认为“agent”。如果未设置K3S_URL，它将默认为“server”</span></span><br><span class="line"><span class="built_in">export</span> K3S_URL=</span><br><span class="line"><span class="comment"># 用于将 server 或 agent 加入集群的共享 secret</span></span><br><span class="line"><span class="built_in">export</span> K3S_TOKEN=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用阿里云镜像源安装</span></span><br><span class="line">curl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 K3s 服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now k3s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 K3s 服务状态</span></span><br><span class="line">systemctl status k3s</span><br></pre></td></tr></table></figure><h2 id="方案三离线安装"><a class="markdownIt-Anchor" href="#方案三离线安装"></a> 方案三：离线安装</h2><h3 id="前提条件"><a class="markdownIt-Anchor" href="#前提条件"></a> <a href="https://docs.rancher.cn/docs/k3s/installation/airgap/_index#%E5%AE%89%E8%A3%85-k3s" target="_blank" rel="noopener">前提条件</a></h3><ul><li>在安装 K3s 之前，完成上面的<a href="https://docs.rancher.cn/docs/k3s/installation/airgap/_index#%E9%83%A8%E7%BD%B2%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93" target="_blank" rel="noopener">部署私有镜像仓库</a>或<a href="https://docs.rancher.cn/docs/k3s/installation/airgap/_index#%E6%89%8B%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%95%9C%E5%83%8F" target="_blank" rel="noopener">手动部署镜像</a>，导入安装 K3s 所需要的镜像。本小节将演示手动部署镜像的方式。</li><li>从 <a href="https://github.com/rancher/k3s/releases" target="_blank" rel="noopener">K3s GitHub Release</a> 页面下载 <a href="https://github.com/k3s-io/k3s/releases/tag/v1.23.13%2Bk3s1" target="_blank" rel="noopener">K3s v1.23.13+k3s1</a> 二进制文件，K3s 二进制文件需要与离线镜像的版本匹配。将二进制文件放在每个离线节点的 <code>/usr/local/bin</code> 中，并确保这个二进制文件是可执行的。</li><li>下载 K3s 安装脚本，将安装脚本放在每个离线节点的任意地方，并命名为 <code>install.sh</code>。</li></ul><p>当使用 <code>INSTALL_K3S_SKIP_DOWNLOAD</code> 环境变量运行 K3s 脚本时，K3s 将使用本地的脚本和二进制。</p><h3 id="手动部署镜像"><a class="markdownIt-Anchor" href="#手动部署镜像"></a> 手动部署镜像</h3><p>假设您已经在离线/国内环境中创建了节点。这种方法需要您手动将必要的镜像部署到每个节点，适用于运行无法部署镜像仓库的边缘部署场景。参考<a href="https://docs.rancher.cn/docs/k3s/installation/airgap/_index/#%E6%89%8B%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%95%9C%E5%83%8F" target="_blank" rel="noopener">官方手动部署镜像</a>文档。</p><ol><li><p>从 <a href="https://github.com/rancher/k3s/releases" target="_blank" rel="noopener">K3s GitHub Release</a> 页面获取需安装的 <a href="https://github.com/k3s-io/k3s/releases/tag/v1.23.13%2Bk3s1" target="_blank" rel="noopener">K3s v1.23.13+k3s1</a> 的镜像 tar 文件。</p></li><li><p>将 tar 文件放在<code>images</code>目录下，例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为每个节点创建离线镜像的存储文件夹</span></span><br><span class="line">sudo mkdir -p /var/lib/rancher/k3s/agent/images/</span><br><span class="line"></span><br><span class="line"><span class="comment"># $ARCH 是当前服务器的 CPU 架构</span></span><br><span class="line">sudo cp ./k3s-airgap-images-<span class="variable">$ARCH</span>.tar /var/lib/rancher/k3s/agent/images/</span><br></pre></td></tr></table></figure></li><li><p>需手动将镜像部署到每个节点，在每个节点执行上述操作。</p></li></ol><h3 id="下载-k3s-v12313k3s1-二进制文件"><a class="markdownIt-Anchor" href="#下载-k3s-v12313k3s1-二进制文件"></a> 下载 <a href="https://github.com/k3s-io/k3s/releases/tag/v1.23.13%2Bk3s1" target="_blank" rel="noopener">K3s v1.23.13+k3s1</a> 二进制文件</h3><p>从 <a href="https://github.com/rancher/k3s/releases" target="_blank" rel="noopener">K3s GitHub Release</a> 页面下载 <a href="https://github.com/k3s-io/k3s/releases/tag/v1.23.13%2Bk3s1" target="_blank" rel="noopener">K3s v1.23.13+k3s1</a> 二进制文件，K3s 二进制文件需要与离线镜像的版本匹配。将二进制文件放在每个离线节点的 <code>/usr/local/bin</code> 中，并确保这个二进制文件是可执行的。</p><h3 id="使用脚本安装"><a class="markdownIt-Anchor" href="#使用脚本安装"></a> 使用脚本安装</h3><p>安装脚本可从下面任一地址下载：</p><table><thead><tr><th>脚本地址</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://get.k3s.io/" target="_blank" rel="noopener">https://get.k3s.io/</a></td><td>官方地址，需要外网环境</td></tr><tr><td><a href="https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh" target="_blank" rel="noopener">https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh</a></td><td>阿里源，内置阿里云镜像源</td></tr><tr><td><a href="https://raw.githubusercontent.com/k3s-io/k3s/master/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/k3s-io/k3s/master/install.sh</a></td><td>GitHub 地址，同官方源</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载脚本</span></span><br><span class="line">curl -sfL https://get.k3s.io &gt; install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换 root 用户</span></span><br><span class="line">sudo su -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予执行权限</span></span><br><span class="line">chmod +x install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 K3s，跳过下载二进制文件，只安装，不启动</span></span><br><span class="line">INSTALL_K3S_SKIP_DOWNLOAD=<span class="literal">true</span> INSTALL_K3S_SKIP_START=<span class="literal">true</span> ./install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 K3s</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now k3s</span><br></pre></td></tr></table></figure><h1 id="验证-k3s"><a class="markdownIt-Anchor" href="#验证-k3s"></a> 验证 K3s</h1><h2 id="检查集群"><a class="markdownIt-Anchor" href="#检查集群"></a> 检查集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看集群的运行情况</span></span><br><span class="line">kubectl get nodes -owide</span><br><span class="line">kubectl get all -A -owide</span><br><span class="line">kubectl describe nodes k3s-node-01</span><br><span class="line">kubectl -n kube-system describe deploy coredns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Docker 作为运行时，会使用 docker 拉取镜像与运行容器</span></span><br><span class="line">docker images</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="牛刀小试"><a class="markdownIt-Anchor" href="#牛刀小试"></a> 牛刀小试</h2><h3 id="启动-whoami-服务"><a class="markdownIt-Anchor" href="#启动-whoami-服务"></a> 启动 whoami 服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速部署 whoami 应用，指定副本为 2，默认副本为 1</span></span><br><span class="line">kubectl create deploy whoami --image=traefik/whoami --replicas=2</span><br><span class="line">kubectl describe deploy whoami</span><br><span class="line"><span class="comment"># 监控 pod 状态，通过扩缩容可直观看到 pod 的调度情况</span></span><br><span class="line">kubectl get pods --watch</span><br><span class="line"><span class="comment"># 尝试下对 whoami 应用进行扩缩容</span></span><br><span class="line">kubectl scale deploy whoami --replicas=5</span><br></pre></td></tr></table></figure><h3 id="请求链路说明"><a class="markdownIt-Anchor" href="#请求链路说明"></a> 请求链路说明</h3><p>让我们尝试着理解下 k8s 的请求链路：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">request public-ip -&gt; node-port -&gt; svc-port -&gt; pod-port -&gt; container</span><br></pre></td></tr></table></figure><h3 id="通过-service-暴露给集群内部访问"><a class="markdownIt-Anchor" href="#通过-service-暴露给集群内部访问"></a> 通过 Service 暴露给集群内部访问</h3><p>默认为 NodePort 模式，会在每个节点监听</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl expose deploy whoami --port=80</span><br><span class="line">kubectl get svc -owide</span><br><span class="line">kubectl describe svc whoami</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在本地通过 service 多访问几次，出轮询访问 container</span></span><br><span class="line"><span class="comment"># curl http://&lt;external-ip&gt;:&lt;port&gt;</span></span><br><span class="line">$ curl `kubectl get -o template service/whoami --template=<span class="string">'&#123;&#123;.spec.clusterIP&#125;&#125;'</span>`</span><br><span class="line">Hostname: whoami-84d974bbd6-shqsr</span><br><span class="line">IP: 127.0.0.1</span><br><span class="line">IP: 10.42.0.13</span><br><span class="line">RemoteAddr: 10.42.0.1:42158</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 10.43.181.167</span><br><span class="line">User-Agent: curl/7.68.0</span><br><span class="line">Accept: */*</span><br></pre></td></tr></table></figure><h3 id="通过-service-暴露给集群外网访问"><a class="markdownIt-Anchor" href="#通过-service-暴露给集群外网访问"></a> 通过 Service 暴露给集群外网访问</h3><p>指定 LoadBalancer 模式并指定公网 IP</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自行替换 &lt;PUBLIC_IP&gt; 为当前节点的公网 IP</span></span><br><span class="line">kubectl expose deploy whoami --<span class="built_in">type</span>=LoadBalancer --port=80 --external-ip &lt;PUBLIC_IP&gt;</span><br><span class="line"></span><br><span class="line">$ kubectl get svc whoami -owide</span><br><span class="line">NAME     TYPE           CLUSTER-IP     EXTERNAL-IP       PORT(S)        AGE   SELECTOR</span><br><span class="line">whoami   LoadBalancer   10.43.77.116   123.123.123.123   80:32101/TCP   16s   app=whoami</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群内部仍可正常访问</span></span><br><span class="line">curl 10.43.77.116</span><br><span class="line">curl `kubectl get -o template service/whoami --template=<span class="string">'&#123;&#123;.spec.clusterIP&#125;&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过外网浏览器访问，需要开启云服务商的防火墙配置</span></span><br><span class="line"><span class="comment"># Ctrl + F5 多刷新几次查看效果</span></span><br><span class="line">http://123.123.123.123:32101</span><br></pre></td></tr></table></figure><h3 id="快速清理实验环境"><a class="markdownIt-Anchor" href="#快速清理实验环境"></a> 快速清理实验环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete all --all</span><br></pre></td></tr></table></figure><h1 id="卸载-k3s"><a class="markdownIt-Anchor" href="#卸载-k3s"></a> <strong>卸载 K3s</strong></h1><ul><li><a href="https://docs.rancher.cn/docs/k3s/installation/uninstall/_index/" target="_blank" rel="noopener">https://docs.rancher.cn/docs/k3s/installation/uninstall/_index/</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一键卸载 server</span></span><br><span class="line">k3s-uninstall.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键卸载 agent</span></span><br><span class="line">k3s-agent-uninstall.sh</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h1><ul><li><a href="https://www.k3s.io/" target="_blank" rel="noopener">https://www.k3s.io/</a></li><li><a href="https://docs.rancher.cn/k3s/" target="_blank" rel="noopener">https://docs.rancher.cn/k3s/</a></li><li><a href="http://zxc0328.github.io/2019/06/04/k3s-setup/" target="_blank" rel="noopener">http://zxc0328.github.io/2019/06/04/k3s-setup/</a></li><li><a href="https://icloudnative.io/posts/deploy-k3s-cross-public-cloud/" target="_blank" rel="noopener">https://icloudnative.io/posts/deploy-k3s-cross-public-cloud/</a></li><li><a href="https://b23.tv/iGpYZQn" target="_blank" rel="noopener">https://b23.tv/iGpYZQn</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实践环境&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实践环境&quot;&gt;&lt;/a&gt; 实践环境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 22.04&lt;/li&gt;
&lt;li&gt;Docker 20.10.13&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http
      
    
    </summary>
    
    
    
      <category term="docker" scheme="https://y0ngb1n.github.io/tags/docker/"/>
    
      <category term="k8s" scheme="https://y0ngb1n.github.io/tags/k8s/"/>
    
      <category term="kubernetes" scheme="https://y0ngb1n.github.io/tags/kubernetes/"/>
    
      <category term="k3s" scheme="https://y0ngb1n.github.io/tags/k3s/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 快速搭建单机版的 Kubernetes 集群</title>
    <link href="https://y0ngb1n.github.io/a/running-local-Kubernetes-clusters-using-docker.html"/>
    <id>https://y0ngb1n.github.io/a/running-local-Kubernetes-clusters-using-docker.html</id>
    <published>2021-12-18T20:33:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<p>随着容器化、微服务、服务网格、服务编排、DevOps 等云原生技术的流行，我们也要跟上时代的步伐，那么我们需要怎么上车呢？此时就需要一个易于在本地运行且 Kubernetes 的工具，可在你的笔记本电脑上的虚拟机内轻松创建单机版 Kubernetes 集群，便于我们使用 Kubernetes 进行日常开发与学习。那么接下让我们轻松地搭建一个更贴近真实的 K8s 环境。</p><h2 id="工具推荐"><a class="markdownIt-Anchor" href="#工具推荐"></a> 工具推荐</h2><p>对于本地实验，还可以使用各种 Kubernetes 实现以运行 Kubernetes 群集，如</p><ul><li>Kind (<a href="https://kind.sigs.k8s.io/" target="_blank" rel="noopener">https://kind.sigs.k8s.io/</a>)</li><li>Minikube (<a href="https://minikube.sigs.k8s.io/docs/" target="_blank" rel="noopener">https://minikube.sigs.k8s.io/docs/</a>)</li><li>MicroK8s (<a href="https://microk8s.io/" target="_blank" rel="noopener">https://microk8s.io/</a>)</li><li>在线体验 K8s (<a href="https://labs.play-with-k8s.com/" target="_blank" rel="noopener">https://labs.play-with-k8s.com/</a>)</li><li>Dockerized (<a href="https://github.com/y0ngb1n/dockerized" target="_blank" rel="noopener">https://github.com/y0ngb1n/dockerized</a>) 推荐我的个人项目，欢迎 Star</li></ul><p>使用上面任一工具的目标都能快速运行一个本地学习的 Kubernetes 群集，其中我个人最喜欢的是 Kind。</p><h2 id="搭建-k8s-集群"><a class="markdownIt-Anchor" href="#搭建-k8s-集群"></a> 搭建 K8s 集群</h2><p>下面分别尝试 Kind 与 Minikube 创建单机版 Kubernetes 集群。</p><h3 id="先安装-kubectl"><a class="markdownIt-Anchor" href="#先安装-kubectl"></a> 先安装 <code>kubectl</code></h3><p>无论使用哪个工具，都需要先正确安装 <code>kubectl</code> Kubernetes 命令行工具，否则安装完 Kind、Minikube 等环境后无法执行 <code>kubectl</code> 命令。</p><ul><li>安装文档：<a href="https://kubernetes.io/zh/docs/tasks/tools/#kubectl" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/tools/#kubectl</a></li></ul><h3 id="使用-kind-创建-k8s-集群"><a class="markdownIt-Anchor" href="#使用-kind-创建-k8s-集群"></a> 使用 Kind 创建 K8s 集群</h3><blockquote><p>kind is a tool for running local Kubernetes clusters using Docker container “nodes”.</p></blockquote><h4 id="安装-kind"><a class="markdownIt-Anchor" href="#安装-kind"></a> 安装 <code>kind</code></h4><p><a href="https://kind.sigs.k8s.io/docs/user/quick-start/" target="_blank" rel="noopener">Kind</a> 提供了多种安装方式，支持以下方式：</p><ul><li>On macOS via Homebrew</li><li>On macOS via MacPorts</li><li>On Windows via Chocolatey</li><li><a href="https://github.com/kubernetes-sigs/kind/releases" target="_blank" rel="noopener">Installing From Release Binaries</a></li><li>Installing From Source</li></ul><p>这里将在 Linux 环境下以 Installing From Release Binaries 方式进行安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64</span><br><span class="line">chmod +x ./kind</span><br><span class="line"><span class="comment"># mv ./kind /some-dir-in-your-PATH/kind</span></span><br></pre></td></tr></table></figure><h4 id="创建-k8s-集群"><a class="markdownIt-Anchor" href="#创建-k8s-集群"></a> 创建 K8s 集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kind create cluster</span><br><span class="line"><span class="comment"># kind delete cluster</span></span><br></pre></td></tr></table></figure><h4 id="检验安装环境"><a class="markdownIt-Anchor" href="#检验安装环境"></a> 检验安装环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">🐋️ ~ kind get clusters</span><br><span class="line">kind</span><br></pre></td></tr></table></figure><h3 id="使用-minikube-创建-k8s-集群"><a class="markdownIt-Anchor" href="#使用-minikube-创建-k8s-集群"></a> 使用 Minikube 创建 K8s 集群</h3><h4 id="安装-minikube"><a class="markdownIt-Anchor" href="#安装-minikube"></a> 安装 <code>minikube</code></h4><p>选择不同环境下的安装方式，参考 <a href="https://minikube.sigs.k8s.io/docs/start/" target="_blank" rel="noopener">https://minikube.sigs.k8s.io/docs/start/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line">sudo install minikube-linux-amd64 /usr/<span class="built_in">local</span>/bin/minikube</span><br></pre></td></tr></table></figure><p>国内网络环境，使用如下命令将自动使用阿里云服务来支持 <code>minikube</code> 的环境配置，参考 <a href="https://developer.aliyun.com/article/221687" target="_blank" rel="noopener">https://developer.aliyun.com/article/221687</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">minikube start --image-mirror-country=<span class="string">'cn'</span></span><br><span class="line"><span class="comment"># minikube delete</span></span><br></pre></td></tr></table></figure><h4 id="检验安装环境-2"><a class="markdownIt-Anchor" href="#检验安装环境-2"></a> 检验安装环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">🐋️ ~ minikube status</span><br><span class="line">minikube</span><br><span class="line"><span class="built_in">type</span>: Control Plane</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line">apiserver: Running</span><br><span class="line">kubeconfig: Configured</span><br></pre></td></tr></table></figure><p>启动 K8s 控制台，参考 <a href="https://minikube.sigs.k8s.io/docs/handbook/dashboard/" target="_blank" rel="noopener">https://minikube.sigs.k8s.io/docs/handbook/dashboard/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">minikube dashboard</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">minikube dashboard --url</span><br></pre></td></tr></table></figure><p>查看 <code>minikube</code> 支持的扩展列表，参考 <a href="https://minikube.sigs.k8s.io/docs/handbook/deploying/" target="_blank" rel="noopener">https://minikube.sigs.k8s.io/docs/handbook/deploying/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">minikube addons list</span><br></pre></td></tr></table></figure><h2 id="检验-k8s-集群"><a class="markdownIt-Anchor" href="#检验-k8s-集群"></a> 检验 K8s 集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">🐋️ ~ kubectl version</span><br><span class="line">Client Version: version.Info&#123;Major:<span class="string">"1"</span>, Minor:<span class="string">"21"</span>, GitVersion:<span class="string">"v1.21.1"</span>, GitCommit:<span class="string">"5e58841cce77d4bc13713ad2b91fa0d961e69192"</span>, GitTreeState:<span class="string">"clean"</span>, BuildDate:<span class="string">"2021-05-12T14:18:45Z"</span>, GoVersion:<span class="string">"go1.16.4"</span>, Compiler:<span class="string">"gc"</span>, Platform:<span class="string">"linux/amd64"</span>&#125;</span><br><span class="line">Server Version: version.Info&#123;Major:<span class="string">"1"</span>, Minor:<span class="string">"22"</span>, GitVersion:<span class="string">"v1.22.3"</span>, GitCommit:<span class="string">"c92036820499fedefec0f847e2054d824aea6cd1"</span>, GitTreeState:<span class="string">"clean"</span>, BuildDate:<span class="string">"2021-10-27T18:35:25Z"</span>, GoVersion:<span class="string">"go1.16.9"</span>, Compiler:<span class="string">"gc"</span>, Platform:<span class="string">"linux/amd64"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前指向的 k8s 环境，kind/minikube 安装时会自动修改 kubectl 配置</span></span><br><span class="line">🐋️ ~ kubectl config current-context</span><br><span class="line">kind-kind</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如本地有多个 k8s 环境，可手动切换</span></span><br><span class="line">🐋️ ~ kubectl config use-context minikube</span><br><span class="line">Switched to context <span class="string">"minikube"</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查服务器节点</span></span><br><span class="line">🐋️ ~ kubectl get no</span><br><span class="line">NAME       STATUS   ROLES                  AGE   VERSION</span><br><span class="line">minikube   Ready    control-plane,master   36m   v1.22.3</span><br><span class="line"></span><br><span class="line">🐋️ ~ kubectl get nodes -o wide</span><br><span class="line">NAME       STATUS   ROLES                  AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME</span><br><span class="line">minikube   Ready    control-plane,master   15m   v1.22.3   192.168.49.2   &lt;none&gt;        Ubuntu 20.04.2 LTS   5.4.0-42-generic   docker://20.10.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 k8s 集群信息</span></span><br><span class="line">🐋️ ~ kubectl cluster-info</span><br><span class="line">Kubernetes control plane is running at https://192.168.49.2:8443</span><br><span class="line">CoreDNS is running at https://192.168.49.2:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br></pre></td></tr></table></figure><h2 id="k8s-初体验"><a class="markdownIt-Anchor" href="#k8s-初体验"></a> K8s 初体验</h2><h3 id="快速尝鲜"><a class="markdownIt-Anchor" href="#快速尝鲜"></a> 快速尝鲜</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动单实例 nginx</span></span><br><span class="line">🐋️ ~ kubectl create deployment nginx-depl --image=nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行的实例</span></span><br><span class="line">🐋️ ~ kubectl get pod</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-depl-5c8bf76b5b-zw8ms   1/1     Running   0          70s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转发一个本地 8080 端口到 Pod 80 端口</span></span><br><span class="line">🐋️ ~ kubectl port-forward nginx-depl-5c8bf76b5b-zw8ms 8080:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地访问</span></span><br><span class="line">🐋️ ~ curl 127.0.0.1:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除实例</span></span><br><span class="line">🐋️ ~ kubectl delete deployment nginx-depl</span><br></pre></td></tr></table></figure><h3 id="小试牛刀"><a class="markdownIt-Anchor" href="#小试牛刀"></a> 小试牛刀</h3><p><code>nginx-pod.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><p><code>nginx-svc.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">31080</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一键发布，启动实例</span></span><br><span class="line">🐋️ ~ kubectl apply -f .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试 Pod</span></span><br><span class="line">🐋️ ~ kubectl describe pod nginx</span><br><span class="line">🐋️ ~ kubectl port-forward nginx 8080:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试 Service</span></span><br><span class="line">🐋️ ~ kubectl describe svc nginx-svc</span><br><span class="line">🐋️ ~ kubectl port-forward service/nginx-svc 8080:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除实例</span></span><br><span class="line">🐋️ ~ kubectl delete -f .</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h2><ul><li>需要先正确安装 <code>kubectl</code></li><li>通过 Port-Forward 可本机访问 Pod，仅限本地调试环境，如 <code>curl 127.0.0.1:8080</code></li><li>通过 Service 反向代理时，需要使用 K8s 集群的 IP 进行访问，使用 <code>kubectl get nodes -o wide</code> 查看 K8s 集群的 IP</li><li>Service 是 K8s 提供反向代理的机制，负责反向路由+负载均衡</li><li>NodePort 是 Service 的一种类型，可将 Service 暴露给外网</li><li>NodePort 范围 <code>30000~32767</code></li><li>Label 是 K8s 的种打标签机制</li><li>Selector 是 K8s 中的路由选择定位机制</li><li>使用 Kind 或 Minikube 部署的 K8s 集群，node 基于容器运行而不是宿主机，使用 Service 反向代理时，只在 node 节点容器中 kube-proxy 生效，使用 <code>docker exec -it kind-control-plane bash</code> 验证这一点，而不是直接映射在宿主机上</li></ul><h2 id="k8s-故障排查指南"><a class="markdownIt-Anchor" href="#k8s-故障排查指南"></a> K8s 故障排查指南</h2><p><img src="https://learnk8s.io/a/a-visual-guide-on-troubleshooting-kubernetes-deployments/troubleshooting-kubernetes.zh_cn.v2.png" alt="a-visual-guide-on-troubleshooting-kubernetes-deployments"></p><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li><a href="https://kubernetes.io/zh/docs/tasks/tools/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/tools/</a></li><li><a href="https://kind.sigs.k8s.io/docs/user/quick-start/" target="_blank" rel="noopener">https://kind.sigs.k8s.io/docs/user/quick-start/</a></li><li><a href="https://developer.aliyun.com/article/221687" target="_blank" rel="noopener">https://developer.aliyun.com/article/221687</a></li><li><a href="https://learnk8s.io/troubleshooting-deployments" target="_blank" rel="noopener">https://learnk8s.io/troubleshooting-deployments</a></li><li><a href="https://b23.tv/2yDbtP9" target="_blank" rel="noopener">https://b23.tv/2yDbtP9</a></li><li><a href="https://youtube.com/playlist?list=PLy7NrYWoggjziYQIDorlXjTvvwweTYoNC" target="_blank" rel="noopener">https://youtube.com/playlist?list=PLy7NrYWoggjziYQIDorlXjTvvwweTYoNC</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着容器化、微服务、服务网格、服务编排、DevOps 等云原生技术的流行，我们也要跟上时代的步伐，那么我们需要怎么上车呢？此时就需要一个易于在本地运行且 Kubernetes 的工具，可在你的笔记本电脑上的虚拟机内轻松创建单机版 Kubernetes 集群，便于我们使用 K
      
    
    </summary>
    
    
    
      <category term="k8s" scheme="https://y0ngb1n.github.io/tags/k8s/"/>
    
      <category term="kubernetes" scheme="https://y0ngb1n.github.io/tags/kubernetes/"/>
    
      <category term="kind" scheme="https://y0ngb1n.github.io/tags/kind/"/>
    
      <category term="minikube" scheme="https://y0ngb1n.github.io/tags/minikube/"/>
    
      <category term="microk8s" scheme="https://y0ngb1n.github.io/tags/microk8s/"/>
    
  </entry>
  
  <entry>
    <title>使用 ELK 集中管理 Spring Boot 应用日志</title>
    <link href="https://y0ngb1n.github.io/a/samples-spring-boot-distributed-log-elk.html"/>
    <id>https://y0ngb1n.github.io/a/samples-spring-boot-distributed-log-elk.html</id>
    <published>2021-07-25T23:28:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<p>项目已托管于 GitHub：<a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">y0ngb1n/spring-boot-samples</a>，欢迎 Star, Fork 😘</p><hr><h2 id="日志的重要性"><a class="markdownIt-Anchor" href="#日志的重要性"></a> 日志的重要性</h2><h3 id="为什么重要"><a class="markdownIt-Anchor" href="#为什么重要"></a> 为什么重要</h3><ul><li>运维：医生给病人看病，日志就是病人对自己病情的陈述</li><li>恶意攻击、恶意注册、刷单、恶意密码猜测等</li></ul><h3 id="面对的挑战"><a class="markdownIt-Anchor" href="#面对的挑战"></a> 面对的挑战</h3><ul><li>关注点很多，任何一个点都有可能引起问题</li><li>日志分散在很多机器，出了问题时，才发现日志被删了</li><li>很多运维人员是消防员，哪里有问题去哪里</li></ul><h2 id="集中化日志管理"><a class="markdownIt-Anchor" href="#集中化日志管理"></a> 集中化日志管理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">日志搜索 &gt; 格式化分析 &gt; 检索与可视化 &gt; 风险告警</span><br></pre></td></tr></table></figure><h2 id="快速搭建-elk-集成环境"><a class="markdownIt-Anchor" href="#快速搭建-elk-集成环境"></a> 快速搭建 ELK 集成环境</h2><h3 id="技术选型"><a class="markdownIt-Anchor" href="#技术选型"></a> 技术选型</h3><p>那么，<a href="https://www.elastic.co/cn/what-is/elk-stack" target="_blank" rel="noopener">ELK 到底是什么呢？</a>“ELK”是三个开源项目的首字母缩写，这三个项目分别是：</p><ul><li><code>E</code>（Elasticsearch）是一个搜索和分析引擎。</li><li><code>L</code>（Logstash）是服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到诸如 Elasticsearch 等“存储库”中。</li><li><code>K</code>（Kibana）则可以让用户在 Elasticsearch 中使用图形和图表对数据进行可视化。</li></ul><h3 id="快速部署"><a class="markdownIt-Anchor" href="#快速部署"></a> 快速部署</h3><p>使用 Docker 部署上面的基础环境，参考配置文件 <a href="./docker-compose.yml"><code>docker-compose.yml</code></a>，输入以下命令进行一键部署：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查配置</span></span><br><span class="line">docker-compose config</span><br><span class="line"><span class="comment"># 启动服务（-d 后台启动）</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 停止并清除服务</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h3 id="配置-logstash"><a class="markdownIt-Anchor" href="#配置-logstash"></a> 配置 Logstash</h3><p>参考配置文件 <a href="./logstash-config.conf"><code>logstash-config.conf</code></a>，示例如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 8080</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; &quot;elasticsearch:9200&quot;</span><br><span class="line">    # 索引名需参考 index templates 的配置，如：logs-*-*</span><br><span class="line">    # index =&gt; &quot;app-logs-%&#123;app_name&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    index =&gt; &quot;app-logs-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring-boot-集成-elk-进行日志管理"><a class="markdownIt-Anchor" href="#spring-boot-集成-elk-进行日志管理"></a> Spring Boot 集成 ELK 进行日志管理</h2><h3 id="添加依赖-maven-central"><a class="markdownIt-Anchor" href="#添加依赖-maven-central"></a> 添加依赖 <a href="https://github.com/logstash/logstash-logback-encoder" target="_blank" rel="noopener"><img src="https://img.shields.io/maven-central/v/net.logstash.logback/logstash-logback-encoder?style=flat-square" alt="Maven Central"></a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logstash-logback-encoder.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加-logback-配置"><a class="markdownIt-Anchor" href="#添加-logback-配置"></a> 添加 logback 配置</h3><h4 id="方式一通过-logback-springxml-配置"><a class="markdownIt-Anchor" href="#方式一通过-logback-springxml-配置"></a> 方式一：通过 logback-spring.xml 配置</h4><p>参考配置文件 <a href="src/main/resources/logstash-logback-spring.xml">logback-spring.xml</a>，示例如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 默认会被序列化到日志文档中 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"APP_NAME"</span> <span class="attr">source</span>=<span class="string">"spring.application.name"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">destination</span>&gt;</span>192.168.50.88:8880<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span> &gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- customFields 的作用是在 Logstash 配置中指定索引名字时的可选参数，日志文档中会添加这个字段 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;"app_name":"$&#123;APP_NAME&#125;"&#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方式二通过-java-config-配置可定制-starter"><a class="markdownIt-Anchor" href="#方式二通过-java-config-配置可定制-starter"></a> 方式二：通过 Java Config 配置（可定制 starter）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"elk.logstash"</span>, name = <span class="string">"enabled"</span>, havingValue = <span class="string">"true"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogstashLogbackConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGSTASH_APPENDER_NAME = <span class="string">"LOGSTASH"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGSTASH_ASYNC_APPENDER_NAME = <span class="string">"ASYNC_LOGSTASH"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;spring.application.name&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> LogstashProperties logstash;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"elk.logstash"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> LogstashProperties <span class="title">logstash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LogstashProperties();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addLogstashAppender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"Initializing LogstashAppender"</span>);</span><br><span class="line">    <span class="keyword">final</span> LogstashTcpSocketAppender logstashAppender = <span class="keyword">new</span> LogstashTcpSocketAppender();</span><br><span class="line">    logstashAppender.setName(LOGSTASH_APPENDER_NAME);</span><br><span class="line">    logstashAppender.setContext(loggerContext);</span><br><span class="line">    logstashAppender.addDestinations(</span><br><span class="line">      <span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.logstash.getHost(), <span class="keyword">this</span>.logstash.getPort())</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://github.com/logstash/logstash-logback-encoder</span></span><br><span class="line">    <span class="keyword">final</span> LogstashEncoder logstashEncoder = <span class="keyword">new</span> LogstashEncoder();</span><br><span class="line">    logstashEncoder.setIncludeContext(<span class="keyword">false</span>);</span><br><span class="line">    String customFields = <span class="string">"&#123;\"app_name\":\""</span> + <span class="keyword">this</span>.appName +<span class="string">"\",\"idol\":\"yangbin\"&#125;"</span>;</span><br><span class="line">    logstashEncoder.setCustomFields(customFields);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ShortenedThrowableConverter throwableConverter = <span class="keyword">new</span> ShortenedThrowableConverter();</span><br><span class="line">    throwableConverter.setRootCauseFirst(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    logstashEncoder.setThrowableConverter(throwableConverter);</span><br><span class="line">    logstashAppender.setEncoder(logstashEncoder);</span><br><span class="line">    logstashAppender.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wrap the appender in an Async appender for performance</span></span><br><span class="line">    <span class="keyword">final</span> AsyncAppender asyncLogstashAppender = <span class="keyword">new</span> AsyncAppender();</span><br><span class="line">    asyncLogstashAppender.setContext(loggerContext);</span><br><span class="line">    asyncLogstashAppender.setName(LOGSTASH_ASYNC_APPENDER_NAME);</span><br><span class="line">    asyncLogstashAppender.setQueueSize(<span class="keyword">this</span>.logstash.getQueueSize());</span><br><span class="line">    asyncLogstashAppender.addAppender(logstashAppender);</span><br><span class="line">    asyncLogstashAppender.start();</span><br><span class="line">    loggerContext.getLogger(<span class="string">"ROOT"</span>).addAppender(asyncLogstashAppender);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过定时器模拟随机日志"><a class="markdownIt-Anchor" href="#通过定时器模拟随机日志"></a> 通过定时器模拟随机日志</h4><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">2021-07-25 23:00:36.552  INFO 15928 --- [           main] i.g.y.s.e.config.LogstashLogbackConfig   : Initializing LogstashAppender</span><br><span class="line">2021-07-25 23:00:36.813  INFO 15928 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'</span><br><span class="line">2021-07-25 23:00:37.017  INFO 15928 --- [           main] o.s.s.c.ThreadPoolTaskScheduler          : Initializing ExecutorService 'taskScheduler'</span><br><span class="line">2021-07-25 23:00:37.084  INFO 15928 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''</span><br><span class="line">2021-07-25 23:00:37.095  INFO 15928 --- [   scheduling-1] i.g.y.s.elk.scheduler.MockLogScheduler   : [4a2fa762-9390-48f3-8478-4fcdbf6ba017] mock log event, log something...</span><br><span class="line">2021-07-25 23:00:37.097  WARN 15928 --- [   scheduling-1] i.g.y.s.elk.scheduler.MockLogScheduler   : [c859978e-5150-4fe4-979f-9acd7957a55a] mock log event, log something...</span><br><span class="line">2021-07-25 23:00:37.097 ERROR 15928 --- [   scheduling-1] i.g.y.s.elk.scheduler.MockLogScheduler   : [7625e2e6-62e9-4bbf-a998-1e741723f824] mock log event, log something...</span><br><span class="line">2021-07-25 23:00:37.599  INFO 15928 --- [   scheduling-1] i.g.y.s.elk.scheduler.MockLogScheduler   : [54ba65f2-05d7-4f27-ab63-bd19a0165b6b] mock log event, log something...</span><br><span class="line">2021-07-25 23:00:37.599  WARN 15928 --- [   scheduling-1] i.g.y.s.elk.scheduler.MockLogScheduler   : [901ca6a0-fc7b-4749-8661-4c81f7c4701d] mock log event, log something...</span><br><span class="line">2021-07-25 23:00:37.599 ERROR 15928 --- [   scheduling-1] i.g.y.s.elk.scheduler.MockLogScheduler   : [e2010eda-3f63-49ec-bb97-1157a2b11f01] mock log event, log something...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="通过-kibana-管理日志"><a class="markdownIt-Anchor" href="#通过-kibana-管理日志"></a> 通过 Kibana 管理日志</h2><h3 id="查看由-logstash-自动创建的索引"><a class="markdownIt-Anchor" href="#查看由-logstash-自动创建的索引"></a> 查看由 Logstash 自动创建的索引</h3><p><img src="https://i.loli.net/2021/07/25/2LftsmVuYTkiwKq.png" alt="indices"></p><h3 id="添加-index-索引"><a class="markdownIt-Anchor" href="#添加-index-索引"></a> 添加 index 索引</h3><p><img src="https://i.loli.net/2021/07/25/DmL7WTOjXiHswA8.png" alt="create index pattern"></p><p><img src="https://i.loli.net/2021/07/25/Ihud39ps15wX8U2.png" alt="define an index pattern"></p><p><img src="https://i.loli.net/2021/07/25/Dm9NBCet2u8q45k.png" alt="configure settings"></p><h3 id="通过-discover-查看日志索引信息"><a class="markdownIt-Anchor" href="#通过-discover-查看日志索引信息"></a> 通过 Discover 查看日志索引信息</h3><p><img src="https://i.loli.net/2021/07/25/NUw2g57z6WqsG4m.png" alt="discover logs"></p><h2 id="参考连接"><a class="markdownIt-Anchor" href="#参考连接"></a> 参考连接</h2><ul><li><a href="https://www.elastic.co/cn/what-is/elk-stack" target="_blank" rel="noopener">什么是 ELK Stack？</a></li><li><a href="https://github.com/bitnami/bitnami-docker-elasticsearch/issues/61" target="_blank" rel="noopener">Invalid kernel settings. Elasticsearch requires at least: vm.max_map_count = 262144</a></li><li><a href="https://www.iocoder.cn/Elasticsearch/ELK-install/" target="_blank" rel="noopener">芋道 ELK(Elasticsearch + Logstash + Kibana) 极简入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目已托管于 GitHub：&lt;a href=&quot;https://github.com/y0ngb1n/spring-boot-samples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;y0ngb1n/spring-boot-samples&lt;/a&gt;，欢迎 
      
    
    </summary>
    
    
    
      <category term="elk" scheme="https://y0ngb1n.github.io/tags/elk/"/>
    
      <category term="elasticsearch" scheme="https://y0ngb1n.github.io/tags/elasticsearch/"/>
    
      <category term="logstash" scheme="https://y0ngb1n.github.io/tags/logstash/"/>
    
      <category term="kibana" scheme="https://y0ngb1n.github.io/tags/kibana/"/>
    
  </entry>
  
  <entry>
    <title>最佳实践丨快速集成 Alibaba Druid 数据库连接池</title>
    <link href="https://y0ngb1n.github.io/a/best-practice-samples-datasource-alibaba-druid.html"/>
    <id>https://y0ngb1n.github.io/a/best-practice-samples-datasource-alibaba-druid.html</id>
    <published>2021-06-13T19:39:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<p>项目已托管于 GitHub：<a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">y0ngb1n/spring-boot-samples</a>，欢迎 Star, Fork 😘</p><hr><h2 id="添加依赖-maven-central"><a class="markdownIt-Anchor" href="#添加依赖-maven-central"></a> 添加依赖 <a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter" target="_blank" rel="noopener"><img src="https://img.shields.io/maven-central/v/com.alibaba/druid-spring-boot-starter?style=flat-square" alt="Maven Central"></a></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;alibaba-druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置属性"><a class="markdownIt-Anchor" href="#配置属性"></a> 配置属性</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:h2:mem:recommend</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">sa</span></span><br><span class="line"><span class="attr">    password:</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># 设置数据源类型为 DruidDataSource</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 配置初始化大小、最小、最大连接池数量</span></span><br><span class="line">      <span class="comment"># - min-idle：池中维护的最小空闲连接数，默认为 0 个</span></span><br><span class="line">      <span class="comment"># - max-active：池中最大连接数，包括闲置和使用中的连接，默认为 8 个；推荐配置：20，多数场景下 20 已完全够用，当然这个参数跟使用场景相关性很大，一般配置成正常连接数的 3~5 倍。</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 参数表示是否对空闲连接保活，布尔类型。</span></span><br><span class="line">      <span class="comment">#</span></span><br><span class="line">      <span class="comment"># 那么需要保活连接，是不是将 keepAlive 配置成 true 就完事了呢？</span></span><br><span class="line">      <span class="comment"># 虽然 true 的确是开启了保活机制，但是应该保活多少个，心跳检查的规则是什么，这些都需要正确配置，否则还是可能事与愿违。</span></span><br><span class="line">      <span class="comment"># 这里需要了解几个相关的参数：minIdle 最小连接池数量，连接保活的数量，空闲连接超时踢除过程会保留的连接数（前提是当前连接数大于等于 minIdle），其实 keepAlive 也仅维护已存在的连接，而不会去新建连接，即使连接数小于 minIdle；</span></span><br><span class="line">      <span class="comment"># minEvictableIdleTimeMillis 单位毫秒，连接保持空闲而不被驱逐的最小时间，保活心跳只对存活时间超过这个值的连接进行；</span></span><br><span class="line">      <span class="comment"># maxEvictableIdleTimeMillis 单位毫秒，连接保持空闲的最长时间，如果连接执行过任何操作后计时器就会被重置（包括心跳保活动作）；</span></span><br><span class="line">      <span class="comment"># timeBetweenEvictionRunsMillis 单位毫秒，Destroy 线程检测连接的间隔时间，会在检测过程中触发心跳。保活检查的详细流程可参见源码 com.alibaba.druid.pool.DruidDataSource.DestroyTask，其中心跳检查会根据配置使用 ping 或 validationQuery 配置的检查语句。</span></span><br><span class="line">      <span class="comment">#</span></span><br><span class="line">      <span class="comment"># 推荐配置：如果网络状况不佳，程序启动慢或者经常出现突发流量，则推荐配置为 true；</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      keep-alive:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line"><span class="attr">      min-evictable-idle-time-millis:</span> <span class="number">600000</span></span><br><span class="line"><span class="attr">      max-evictable-idle-time-millis:</span> <span class="number">900000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line"><span class="attr">      time-between-eviction-runs-millis:</span> <span class="number">2000</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="comment">#</span></span><br><span class="line">      <span class="comment"># 推荐配置:</span></span><br><span class="line">      <span class="comment"># - 内网（网络状况好）800；</span></span><br><span class="line">      <span class="comment"># - 网络状况不是特别好的情况下推荐大于等于 1200，因为 tcp 建连重试一般是 1 秒；</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="number">800</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 可以配置 connectTimeout 和 socketTimeout，它们的单位都是毫秒，这两个参数在应对网络异常方面非常重要。</span></span><br><span class="line">      <span class="comment"># - connectTimeout 配置建立 TCP 连接的超时时间；</span></span><br><span class="line">      <span class="comment"># - socketTimeout 配置发送请求后等待响应的超时时间；</span></span><br><span class="line">      <span class="comment"># 这两个参数也可以通过在 jdbc url 中添加 connectTimeout=xxx&amp;socketTimeout=xxx 的方式配置，试过在 connectinoProperties 中和 jdbc url两个地方都配置，发现优先使用 connectionProperties 中的配置。</span></span><br><span class="line">      <span class="comment"># 如果不设置这两项超时时间，服务会有非常高的风险。现实案例是在网络异常后发现应用无法连接到 DB，但是重启后却能正常的访问 DB。因为在网络异常下 socket 没有办法检测到网络错误，这时连接其实已经变为“死连接”，如果没有设置 socket 网络超时，连接就会一直等待 DB 返回结果，造成新的请求都无法获取到连接。</span></span><br><span class="line">      <span class="comment">#</span></span><br><span class="line">      <span class="comment"># 推荐配置：socketTimeout=3000;connectTimeout=1200</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      connect-properties:</span> <span class="string">socketTimeout=3000;connectTimeout=1200</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 用于检测连接是否有效的 SQL 语句</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行 validationQuery 检测连接是否有效</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 申请连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 归还连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 通过限制达到一定使用次数后断开重连，使得多个服务器间负载更均衡</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      phy-max-use-count:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="多数据源"><a class="markdownIt-Anchor" href="#多数据源"></a> 多数据源</h2><h3 id="添加配置"><a class="markdownIt-Anchor" href="#添加配置"></a> 添加配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 合并多个 DruidDataSource 的监控数据</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># Druid 数据源 1 配置</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      foo:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">jdbc:h2:mem:foo</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">        password:</span></span><br><span class="line"><span class="attr">        initial-size:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">        maxWait:</span> <span class="number">800</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># Druid 数据源 2 配置</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      bar:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">jdbc:h2:mem:bar</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">bar</span></span><br><span class="line"><span class="attr">        password:</span></span><br><span class="line"><span class="attr">        initial-size:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">        maxWait:</span> <span class="number">1200</span></span><br></pre></td></tr></table></figure><h3 id="创建数据源"><a class="markdownIt-Anchor" href="#创建数据源"></a> 创建数据源</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@Primary</span></span><br><span class="line">  <span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.datasource.druid.foo"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourceFoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.datasource.druid.bar"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourceBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-filter"><a class="markdownIt-Anchor" href="#配置-filter"></a> 配置 Filter</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      filters:</span> <span class="string">config,stat,slf4j</span></span><br><span class="line"><span class="attr">      filter:</span></span><br><span class="line"><span class="attr">        config:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># 配置 StatFilter，参考文档：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"><span class="attr">        stat:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 开启慢查询记录</span></span><br><span class="line"><span class="attr">          log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 慢 SQL 的标准，单位：毫秒</span></span><br><span class="line"><span class="attr">          slow-sql-millis:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        slf4j:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        wall:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line">      <span class="comment"># 配置 StatViewServlet，参考文档：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE</span></span><br><span class="line">      <span class="comment"># 访问 http://127.0.0.1:8080/druid 地址，可以看到监控页面</span></span><br><span class="line">      <span class="comment">##</span></span><br><span class="line"><span class="attr">      stat-view-servlet:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        login-username:</span> <span class="string">yangbin</span></span><br><span class="line"><span class="attr">        login-password:</span> <span class="string">yangbin</span></span><br></pre></td></tr></table></figure><h2 id="监控数据"><a class="markdownIt-Anchor" href="#监控数据"></a> 监控数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidStatController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/druid/stat"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">druidStat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DruidStatManagerFacade.getInstance().getDataSourceStatDataList();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="️-参考链接"><a class="markdownIt-Anchor" href="#️-参考链接"></a> 🔗️ 参考链接</h2><ul><li><a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter" target="_blank" rel="noopener">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></li><li><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/DruidDataSource配置</a></li><li><a href="https://www.alibabacloud.com/help/zh/doc-detail/123739.htm" target="_blank" rel="noopener">Druid 连接池配置</a></li><li><a href="https://tech.youzan.com/shu-ju-ku-lian-jie-chi-pei-zhi/" target="_blank" rel="noopener">数据库连接池配置（案例及排查指南）</a></li><li><a href="https://www.iocoder.cn/Spring-Boot/datasource-pool/" target="_blank" rel="noopener">芋道 Spring Boot 数据库连接池入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目已托管于 GitHub：&lt;a href=&quot;https://github.com/y0ngb1n/spring-boot-samples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;y0ngb1n/spring-boot-samples&lt;/a&gt;，欢迎 
      
    
    </summary>
    
    
    
      <category term="datasource" scheme="https://y0ngb1n.github.io/tags/datasource/"/>
    
      <category term="druid" scheme="https://y0ngb1n.github.io/tags/druid/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus 与 Grafana 的安装与配置</title>
    <link href="https://y0ngb1n.github.io/a/promethues-grafana-installation-and-configuration.html"/>
    <id>https://y0ngb1n.github.io/a/promethues-grafana-installation-and-configuration.html</id>
    <published>2020-12-06T18:13:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x0-学习资源"><a class="markdownIt-Anchor" href="#0x0-学习资源"></a> 0x0 学习资源</h1><ul><li><a href="https://yunlzheng.gitbook.io/prometheus-book/" target="_blank" rel="noopener">https://yunlzheng.gitbook.io/prometheus-book/</a></li><li><a href="https://songjiayang.gitbooks.io/prometheus/" target="_blank" rel="noopener">https://songjiayang.gitbooks.io/prometheus/</a></li></ul><h1 id="0x1-prometheus-的安装与配置"><a class="markdownIt-Anchor" href="#0x1-prometheus-的安装与配置"></a> 0x1 Prometheus 的安装与配置</h1><p><img src="https://i.loli.net/2020/12/06/umDLPQXgI8b5BFk.png" alt="Hello Promethues!"></p><h3 id="docker-compose-方式安装"><a class="markdownIt-Anchor" href="#docker-compose-方式安装"></a> Docker Compose 方式安装</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  prometheus-server:</span></span><br><span class="line">    <span class="comment"># https://github.com/bitnami/bitnami-docker-prometheus</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">bitnami/prometheus:2.23.0</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">prometheus-server</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line">      <span class="comment"># https://prometheus.io/docs/prometheus/latest/configuration/configuration/</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/etc/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml</span></span><br><span class="line"><span class="attr">      - prometheus_data:</span><span class="string">/opt/bitnami/prometheus/data</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"--config.file=/opt/bitnami/prometheus/conf/prometheus.yml"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"--storage.tsdb.path=/opt/bitnami/prometheus/data"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"--web.console.libraries=/opt/bitnami/prometheus/conf/console_libraries"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"--web.console.templates=/opt/bitnami/prometheus/conf/consoles"</span></span><br><span class="line">      <span class="comment"># https://www.prometheus.io/docs/guides/basic-auth/</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--web.external-url=http://localhost:80/prometheus</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--web.route-prefix=/</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'9090:9090'</span></span><br><span class="line"><span class="attr">    logging:</span></span><br><span class="line"><span class="attr">      driver:</span> <span class="string">json-file</span></span><br><span class="line"><span class="attr">      options:</span></span><br><span class="line"><span class="attr">        max-size:</span> <span class="string">"200k"</span></span><br><span class="line"><span class="attr">        max-file:</span> <span class="string">"10"</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">unless-stop</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  prometheus_data:</span></span><br></pre></td></tr></table></figure><h2 id="反向代理配置"><a class="markdownIt-Anchor" href="#反向代理配置"></a> 反向代理配置</h2><h3 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> Nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># https://www.prometheus.io/docs/guides/basic-auth/</span><br><span class="line"># https://github.com/prometheus-community/prometheus-playground/tree/master/nginx</span><br><span class="line">location /prometheus &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:9090/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exporters-and-integrations"><a class="markdownIt-Anchor" href="#exporters-and-integrations"></a> Exporters and Integrations</h2><p><a href="https://prometheus.io/docs/instrumenting/exporters/" target="_blank" rel="noopener">Exporters and integrations</a></p><p>Chrome Metrics 语法高亮插件</p><p><a href="https://github.com/fhemberger/prometheus-formatter" target="_blank" rel="noopener">fhemberger/prometheus-formatter</a></p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://www.qikqiak.com/post/blackbox-exporter-on-prometheus/" target="_blank" rel="noopener">https://www.qikqiak.com/post/blackbox-exporter-on-prometheus/</a></li><li><a href="https://www.qikqiak.com/post/prometheus-book/" target="_blank" rel="noopener">https://www.qikqiak.com/post/prometheus-book/</a></li></ul><hr><h1 id="0x2-grafana-的安装与配置"><a class="markdownIt-Anchor" href="#0x2-grafana-的安装与配置"></a> 0x2 Grafana 的安装与配置</h1><p><img src="https://i.loli.net/2020/12/06/2qfhBVXTyGSF9sI.png" alt="Hello Grafana!"></p><h3 id="docker-compose-方式安装-2"><a class="markdownIt-Anchor" href="#docker-compose-方式安装-2"></a> Docker Compose 方式安装</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  grafana-server:</span></span><br><span class="line">    <span class="comment"># https://github.com/bitnami/bitnami-docker-grafana</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">bitnami/grafana:7.3.4</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">grafana-server</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line">      <span class="comment"># https://grafana.com/docs/grafana/latest/administration/configuration/</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'GF_SECURITY_ADMIN_USER=admin'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'GF_SECURITY_ADMIN_PASSWORD=admin_password'</span></span><br><span class="line">      <span class="comment"># https://grafana.com/tutorials/run-grafana-behind-a-proxy/</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'GF_SERVER_HTTP_PORT=8848'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'GF_SERVER_SERVE_FROM_SUB_PATH=true'</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - grafana_data:</span><span class="string">/opt/bitnami/grafana/data</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8848:8848'</span></span><br><span class="line"><span class="attr">    logging:</span></span><br><span class="line"><span class="attr">      driver:</span> <span class="string">json-file</span></span><br><span class="line"><span class="attr">      options:</span></span><br><span class="line"><span class="attr">        max-size:</span> <span class="string">"200k"</span></span><br><span class="line"><span class="attr">        max-file:</span> <span class="string">"10"</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">unless-stop</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  grafana_data:</span></span><br></pre></td></tr></table></figure><h2 id="反向代理配置-2"><a class="markdownIt-Anchor" href="#反向代理配置-2"></a> 反向代理配置</h2><h3 id="nginx-2"><a class="markdownIt-Anchor" href="#nginx-2"></a> Nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># https://grafana.com/tutorials/run-grafana-behind-a-proxy/</span><br><span class="line">location /grafana/ &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8848/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料-2"><a class="markdownIt-Anchor" href="#参考资料-2"></a> 参考资料</h2><ul><li><a href="https://www.qikqiak.com/post/grafana-usage-in-k8s/" target="_blank" rel="noopener">https://www.qikqiak.com/post/grafana-usage-in-k8s/</a></li></ul><hr><h1 id="0x3-容器间组网"><a class="markdownIt-Anchor" href="#0x3-容器间组网"></a> 0x3 容器间组网</h1><ul><li>创建外部容器交换机</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create homelab_net</span><br></pre></td></tr></table></figure><ul><li>加入外部容器交换机</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  whoami:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">homelab_net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  homelab_net:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="0x4-万物可监控"><a class="markdownIt-Anchor" href="#0x4-万物可监控"></a> 0x4 万物可监控</h1><p><a href="https://prometheus.io/docs/instrumenting/exporters/" target="_blank" rel="noopener">Exporters and integrations</a></p><h2 id="推荐-grafana-监控模板"><a class="markdownIt-Anchor" href="#推荐-grafana-监控模板"></a> 推荐 Grafana 监控模板</h2><p><a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">Grafana Dashboards - discover and share dashboards for Grafana.</a></p><p><a href="https://www.notion.so/d66c34f5d56d4295b549641f52354ec9" target="_blank" rel="noopener">推荐模板</a></p><h2 id="docker-容器监控cadvisor"><a class="markdownIt-Anchor" href="#docker-容器监控cadvisor"></a> Docker 容器监控：<a href="https://github.com/google/cadvisor" target="_blank" rel="noopener">cAdvisor</a></h2><ul><li>使用 <a href="https://github.com/google/cadvisor" target="_blank" rel="noopener">Google 开源的 cAdvisor</a> 容器监控<ul><li>只做实时数据监控，不存储监控数据，配合 Prometheus 效果更佳</li><li><a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/exporter/commonly-eporter-usage/use-prometheus-monitor-container" target="_blank" rel="noopener">参考教程</a></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VERSION=v0.36.0 <span class="comment"># use the latest release version from https://github.com/google/cadvisor/releases</span></span><br><span class="line">sudo docker run \</span><br><span class="line">  --volume=/:/rootfs:ro \</span><br><span class="line">  --volume=/var/run:/var/run:ro \</span><br><span class="line">  --volume=/sys:/sys:ro \</span><br><span class="line">  --volume=/var/lib/docker/:/var/lib/docker:ro \</span><br><span class="line">  --volume=/dev/disk/:/dev/disk:ro \</span><br><span class="line">  --publish=8080:8080 \</span><br><span class="line">  --detach=<span class="literal">true</span> \</span><br><span class="line">  --name=cadvisor \</span><br><span class="line">  --privileged \</span><br><span class="line">  --device=/dev/kmsg \</span><br><span class="line">  gcr.io/cadvisor/cadvisor:<span class="variable">$VERSION</span></span><br></pre></td></tr></table></figure><h2 id="nix-系统监控node-exporter"><a class="markdownIt-Anchor" href="#nix-系统监控node-exporter"></a> *NIX 系统监控：<a href="https://github.com/prometheus/node_exporter" target="_blank" rel="noopener">Node Exporter</a></h2><ul><li>使用 <a href="https://github.com/prometheus/node_exporter" target="_blank" rel="noopener">Prometheus 开源的 Node Exporter</a><ul><li><a href="https://songjiayang.gitbooks.io/prometheus/content/exporter/nodeexporter.html" target="_blank" rel="noopener">参考教程</a></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --net=<span class="string">"host"</span> \</span><br><span class="line">  --pid=<span class="string">"host"</span> \</span><br><span class="line">  -v <span class="string">"/:/host:ro,rslave"</span> \</span><br><span class="line">  quay.io/prometheus/node-exporter \</span><br><span class="line">  --path.rootfs=/host</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node-exporter:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">quay.io/prometheus/node-exporter</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">    pid:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'9100:9100'</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--path.rootfs=/host</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/:/host:ro,rslave"</span></span><br></pre></td></tr></table></figure><h2 id="网络探测blackbox-exporter"><a class="markdownIt-Anchor" href="#网络探测blackbox-exporter"></a> 网络探测：<a href="https://github.com/prometheus/blackbox_exporter" target="_blank" rel="noopener">Blackbox Exporter</a></h2><ul><li>使用 <a href="https://github.com/prometheus/blackbox_exporter" target="_blank" rel="noopener">Prometheus 开源的 Blackbox Exporter</a><ul><li><a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/exporter/commonly-eporter-usage/install_blackbox_exporter" target="_blank" rel="noopener">参考教程</a></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --rm -d -p 9115:9115 --name blackbox_exporter -v `<span class="built_in">pwd</span>`:/config prom/blackbox-exporter:master --config.file=/config/blackbox.yml</span><br></pre></td></tr></table></figure><h2 id="nginx-监控nginx-prometheus-exporter"><a class="markdownIt-Anchor" href="#nginx-监控nginx-prometheus-exporter"></a> Nginx 监控：<a href="https://github.com/nginxinc/nginx-prometheus-exporter" target="_blank" rel="noopener">Nginx Prometheus Exporter</a></h2><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line"><span class="attr">location</span> = /metrics &#123;</span><br><span class="line">  stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 9113:9113 nginx/nginx-prometheus-exporter:0.8.0 -nginx.scrape-uri http://&lt;nginx&gt;:8080/stub_status</span><br></pre></td></tr></table></figure><h3 id="grafana-dashboard"><a class="markdownIt-Anchor" href="#grafana-dashboard"></a> Grafana Dashboard</h3><ul><li><a href="https://github.com/nginxinc/nginx-prometheus-exporter/tree/master/grafana" target="_blank" rel="noopener">https://github.com/nginxinc/nginx-prometheus-exporter/tree/master/grafana</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x0-学习资源&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x0-学习资源&quot;&gt;&lt;/a&gt; 0x0 学习资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yunlzheng.gitbook.io/prometheus
      
    
    </summary>
    
    
    
      <category term="prometheus" scheme="https://y0ngb1n.github.io/tags/prometheus/"/>
    
      <category term="grafana" scheme="https://y0ngb1n.github.io/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>在 Spring Boot 项目中使用 Swagger 文档</title>
    <link href="https://y0ngb1n.github.io/a/swagger-2-documentation-for-spring-rest-api.html"/>
    <id>https://y0ngb1n.github.io/a/swagger-2-documentation-for-spring-rest-api.html</id>
    <published>2019-12-29T00:08:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<p>项目已托管于 GitHub：<a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">y0ngb1n/spring-boot-samples</a>，欢迎 Star, Fork 😘</p><hr><p>Swagger 又称丝袜哥，号称可以让程序员边写代码边生产接口文档。</p><h2 id="添加-swagger-2-依赖"><a class="markdownIt-Anchor" href="#添加-swagger-2-依赖"></a> 添加 Swagger 2 依赖</h2><p>在 <code>pom.xml</code> 中添加 Swagger 2 所需依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加-swagger-的-java-配置"><a class="markdownIt-Anchor" href="#添加-swagger-的-java-配置"></a> 添加 Swagger 的 Java 配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select()</span><br><span class="line">      .apis(RequestHandlerSelectors.any())</span><br><span class="line">      .paths(PathSelectors.any())</span><br><span class="line">      .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="swagger-注解说明"><a class="markdownIt-Anchor" href="#swagger-注解说明"></a> Swagger 注解说明</h3><p>Swagger 通过注解表明该接口会生成文档，包括接口名、请求方法、参数、返回信息的等等。</p><ul><li><code>@Api</code>：修饰整个类，描述 Controller 的作用</li><li><code>@ApiOperation</code>：描述一个类的一个方法，或者说一个接口</li><li><code>@ApiParam</code>：单个参数描述</li><li><code>@ApiModel</code>：用对象来接收参数</li><li><code>@ApiProperty</code>：用对象接收参数时，描述对象的一个字段</li><li><code>@ApiResponse</code>：HTTP 响应其中 1 个描述</li><li><code>@ApiResponses</code>：HTTP 响应整体描述</li><li><code>@ApiIgnore</code>：使用该注解忽略这个API</li><li><code>@ApiImplicitParam</code>：一个请求参数</li><li><code>@ApiImplicitParams</code>：多个请求参数</li></ul><p>以上这些就是最常用的几个注解了。</p><p>具体其他的注解，查看：<a href="https://github.com/swagger-api/swagger-core/wiki/Annotations" target="_blank" rel="noopener">https://github.com/swagger-api/swagger-core/wiki/Annotations</a></p><p>更多请参考 <a href="http://docs.swagger.io/swagger-core/apidocs/com/wordnik/swagger/annotations/package-summary.html" target="_blank" rel="noopener">Swagger 注解文档</a></p><h3 id="添加-controller-model-来测试效果"><a class="markdownIt-Anchor" href="#添加-controller-model-来测试效果"></a> 添加 Controller、Model 来测试效果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api</span>(value = <span class="string">"用户管理"</span>, description = <span class="string">"用户信息的「增、删、查、改」操作"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/sample/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long, UserModel&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"用户列表"</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(path = <span class="string">"/"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;UserModel&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(users.values());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"创建用户"</span>, notes = <span class="string">"根据 User 对象创建用户"</span>)</span><br><span class="line">  <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体"</span>, required = <span class="keyword">true</span>, dataTypeClass = UserModel.class)</span><br><span class="line">  <span class="meta">@PostMapping</span>(path = <span class="string">"/"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserModel <span class="title">createUser</span><span class="params">(@RequestBody UserModel user)</span> </span>&#123;</span><br><span class="line">    users.put(user.getId(), user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"用户详细信息"</span>, notes = <span class="string">"根据 ID 获取用户详细信息"</span>)</span><br><span class="line">  <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户 ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(path = <span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserModel <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> users.get(id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"更新用户详细信息"</span>, notes = <span class="string">"根据 ID 指定更新对象, 并根据 User 信息来更新用户详细信息"</span>)</span><br><span class="line">  <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">      <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户 ID"</span>, required = <span class="keyword">true</span>, dataTypeClass = Long.class),</span><br><span class="line">      <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体"</span>, required = <span class="keyword">true</span>, dataTypeClass = UserModel.class)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="meta">@PutMapping</span>(path = <span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserModel <span class="title">updateUser</span><span class="params">(@PathVariable Long id, @RequestBody UserModel user)</span> </span>&#123;</span><br><span class="line">    UserModel updateUser = users.get(id);</span><br><span class="line">    updateUser.setName(user.getName());</span><br><span class="line">    updateUser.setAge(user.getAge());</span><br><span class="line">    updateUser.setEmail(user.getEmail());</span><br><span class="line">    users.put(id, updateUser);</span><br><span class="line">    <span class="keyword">return</span> updateUser;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"删除用户"</span>, notes = <span class="string">"根据 ID 指定删除对象"</span>)</span><br><span class="line">  <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户 ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">  <span class="meta">@DeleteMapping</span>(path = <span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    users.remove(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"用户模型"</span>, description = <span class="string">"用户详细信息实体类"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户 ID"</span>)</span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiModelProperty</span>(value = <span class="string">"名字"</span>, allowableValues = <span class="string">"y0ngb1n, tony"</span>)</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiModelProperty</span>(value = <span class="string">"年龄"</span>, allowableValues = <span class="string">"range[1, 120]"</span>)</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiModelProperty</span>(value = <span class="string">"邮箱"</span>)</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以启动项目进行验证是否成功集成 Swagger 2 了，启动项目后，在日志中可以看到 Swagger 为我们添加了访问端点 <code>/v2/api-docs</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">2019-12-28 22:19:53.880  INFO 11935 --- [main] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity&lt;springfox.documentation.spring.web.json.Json&gt; springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过浏览器访问 <code>http://localhost:8080/v2/api-docs</code>，可以发现返回的结果是一段 JSON 串，可读性非常差。幸运的是 Swagger 2 为我们提供了可视化的交互界面 SwaggerUI，下面我们就一起来试试吧。</p><h2 id="添加-swagger-ui-依赖"><a class="markdownIt-Anchor" href="#添加-swagger-ui-依赖"></a> 添加 Swagger UI 依赖</h2><p>同上面一样，在 <code>pom.xml</code> 中添加 Swagger UI 所需依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完成后，重新启动项目，然后通过浏览器访问 <code>http://localhost:8080/swagger-ui.html</code>，便以看到下面就效果：</p><p><img src="https://i.loli.net/2019/12/28/ZfvNclUYmoLpkPb.png" alt="Swagger 2"></p><p>到这里就集成 Swagger 成功了，更多高阶的操作就等继续看文档或下面的参考链接进一步摸索了，祝学习愉快！</p><h2 id="️-参考链接"><a class="markdownIt-Anchor" href="#️-参考链接"></a> 🔗️ 参考链接</h2><ul><li><a href="https://www.baeldung.com/swagger-2-documentation-for-spring-rest-api" target="_blank" rel="noopener">https://www.baeldung.com/swagger-2-documentation-for-spring-rest-api</a></li><li><a href="https://www.tutorialspoint.com/spring_boot/spring_boot_enabling_swagger2.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/spring_boot/spring_boot_enabling_swagger2.htm</a></li><li><a href="http://blog.didispace.com/tags/Swagger/" target="_blank" rel="noopener">http://blog.didispace.com/tags/Swagger/</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-using-swagger-in-a-spring-boot-project/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-using-swagger-in-a-spring-boot-project/index.html</a></li><li><a href="https://mp.weixin.qq.com/s/EYnL7T0yOgNXYIrBWBg8hg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/EYnL7T0yOgNXYIrBWBg8hg</a></li><li><a href="https://github.com/dyc87112/swagger-butler" target="_blank" rel="noopener">https://github.com/dyc87112/swagger-butler</a></li><li><a href="https://github.com/SpringForAll/spring-boot-starter-swagger" target="_blank" rel="noopener">https://github.com/SpringForAll/spring-boot-starter-swagger</a></li><li><a href="https://blog.csdn.net/lilyssh/article/details/82944507" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82944507</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目已托管于 GitHub：&lt;a href=&quot;https://github.com/y0ngb1n/spring-boot-samples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;y0ngb1n/spring-boot-samples&lt;/a&gt;，欢迎 
      
    
    </summary>
    
    
    
      <category term="spring-boot" scheme="https://y0ngb1n.github.io/tags/spring-boot/"/>
    
      <category term="swagger" scheme="https://y0ngb1n.github.io/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>使用 Prometheus &amp; Grafana 监控你的 Spring Boot 应用</title>
    <link href="https://y0ngb1n.github.io/a/monitoring-your-springboot-app-with-prometheus-grafana.html"/>
    <id>https://y0ngb1n.github.io/a/monitoring-your-springboot-app-with-prometheus-grafana.html</id>
    <published>2019-12-28T19:03:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<p>项目已托管于 GitHub：<a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">y0ngb1n/spring-boot-samples</a>，欢迎 Star, Fork 😘</p><hr><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><ul><li>Prometheus <code>v2.14.0</code></li><li>Grafana <code>v6.5.0</code></li></ul><p>使用 Docker 部署上面的基础环境，配置文件可见 <a href="./docker-compose.yml"><code>docker-compose.yml</code></a>，输入以下命令进行一键部署：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查配置</span></span><br><span class="line">docker-compose config</span><br><span class="line"><span class="comment"># 启动服务（-d 后台启动）</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 停止并清除服务</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h2 id="添加依赖项"><a class="markdownIt-Anchor" href="#添加依赖项"></a> 添加依赖项</h2><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 借助 Micrometer 对接 Prometheus 监控系统 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">monitoring-prometheus-grafana</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line">        <span class="comment"># 将 Actuator 的 /actuator/prometheus 端点暴露出来</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'prometheus'</span></span><br><span class="line"><span class="attr">  metrics:</span></span><br><span class="line"><span class="attr">    tags:</span> </span><br><span class="line"><span class="attr">      application:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">io.github.y0ngb1n.*:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="使用方式"><a class="markdownIt-Anchor" href="#使用方式"></a> 使用方式</h2><p><strong>Step 1: 启动服务</strong></p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mvn spring-boot:run</span></span><br><span class="line">...</span><br><span class="line">2019-12-08 22:28:11.916  INFO 36157 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 1 endpoint(s) beneath base path '/actuator'</span><br><span class="line">2019-12-08 22:28:12.045  INFO 36157 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''</span><br><span class="line">2019-12-08 22:28:12.050  INFO 36157 --- [           main] i.g.y.m.p.PrometheusGrafanaApplication   : Started PrometheusGrafanaApplication in 20.638 seconds (JVM running for 27.154)</span><br></pre></td></tr></table></figure><p><strong>Step 2: 访问 <code>/actuator/prometheus</code> 端口</strong></p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -sS http://127.0.0.1:8080/actuator/prometheus</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> HELP jvm_gc_memory_promoted_bytes_total Count of positive increases <span class="keyword">in</span> the size of the old generation memory pool before GC to after GC</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TYPE jvm_gc_memory_promoted_bytes_total counter</span></span><br><span class="line">jvm_gc_memory_promoted_bytes_total&#123;application="monitoring-prometheus-grafana",&#125; 9986992.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> HELP jvm_threads_daemon_threads The current number of live daemon threads</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TYPE jvm_threads_daemon_threads gauge</span></span><br><span class="line">jvm_threads_daemon_threads&#123;application="monitoring-prometheus-grafana",&#125; 30.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> HELP process_uptime_seconds The uptime of the Java virtual machine</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TYPE process_uptime_seconds gauge</span></span><br><span class="line">process_uptime_seconds&#123;application="monitoring-prometheus-grafana",&#125; 75.133</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="将应用与-prometheus-对接"><a class="markdownIt-Anchor" href="#将应用与-prometheus-对接"></a> 将应用与 Prometheus 对接</h2><p>添加 Prometheus 的配置文件：<a href="./prometheus.yml"><code>prometheus.yml</code></a></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># 任意写，建议英文，不要包含特殊字符</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'spring-boot-app'</span></span><br><span class="line">    <span class="comment"># 多久采集一次数据</span></span><br><span class="line"><span class="attr">    scrape_interval:</span> <span class="number">15</span><span class="string">s</span></span><br><span class="line">    <span class="comment"># 采集时的超时时间</span></span><br><span class="line"><span class="attr">    scrape_timeout:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line">    <span class="comment"># 采集的路径是啥</span></span><br><span class="line"><span class="attr">    metrics_path:</span> <span class="string">'/actuator/prometheus'</span></span><br><span class="line">    <span class="comment"># 采集服务的地址，设置成 Spring Boot 应用所在服务器的具体地址</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['192.168.31.44:8080']</span></span><br></pre></td></tr></table></figure><p>可使用 <code>ifconfig</code> 查看宿主机的 IP 地址，Prometheus 服务器就会自动每隔15秒请求 <code>http://your-ip:8080/actuator/prometheus</code>。更多配置参见 👉<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/" target="_blank" rel="noopener">官方文档</a></p><h3 id="测试访问-prometheus"><a class="markdownIt-Anchor" href="#测试访问-prometheus"></a> 测试访问 Prometheus</h3><p><strong>STEP 1</strong>：在浏览器中访问 <code>http://localhost:9090</code></p><p><img src="https://i.loli.net/2019/12/08/D5lS8X7nJTAdyqe.png" alt="http://localhost:9090/graph" title="http://localhost:9090/graph"></p><p><strong>STEP 2</strong>：查看监控数据</p><ul><li>点击 <code>Insert metric at cursor</code>，即可选择监控指标；</li><li>点击 <code>Graph</code>，即可让指标以图表方式展示；</li><li>点击 <code>Execute</code> 按钮，即可看到类似下图的结果。</li></ul><p><img src="https://i.loli.net/2019/12/08/UAsulByFPcC259M.png" alt="查看监控数据"></p><h2 id="集成-grafana-可视化"><a class="markdownIt-Anchor" href="#集成-grafana-可视化"></a> 集成 Grafana 可视化</h2><p>前面已经使用 <code>docker-compose</code> 启动了 Grafana，下面进行配置。</p><p><strong>STEP 1</strong>：在浏览器中访问 <code>http://localhost:3000</code>，并使用初始帐号 <code>admin:admin</code> 进行登录</p><p><img src="https://i.loli.net/2019/12/28/kOZQLWhla1U5JzF.png" alt="Grafana Login Page"></p><p><strong>STEP 2</strong>：点击 <code>Add Data Source</code> 进行添加 Prometheus 数据源</p><p><img src="https://i.loli.net/2019/12/28/FT9GiJ1uMz4ave2.png" alt="Add Data Source"></p><p><img src="https://i.loli.net/2019/12/28/BrbNdkWj7IUMA8O.png" alt="Prometheus Data Source"></p><p><img src="https://i.loli.net/2019/12/28/hQqbtoIRC1HuFBJ.png" alt="image.png"></p><p><strong>STEP 3</strong>：创建 Dashboard</p><p><img src="https://i.loli.net/2019/12/28/iDkbPXwyvEVz6Jm.png" alt="New Dashboard"></p><p><img src="https://i.loli.net/2019/12/28/JdyO7aiwQgKjpqh.png" alt="Add Query"></p><ul><li>设置监控指标</li></ul><p><img src="https://i.loli.net/2019/12/28/qE9TnzV4XkJaG3f.png" alt="Add Query"></p><ul><li>设置 Dashboard 信息</li></ul><p><img src="https://i.loli.net/2019/12/28/CfDSj3mV9HNt6rT.png" alt="Title"></p><ul><li>保存 Dashboard</li></ul><p><img src="https://i.loli.net/2019/12/28/BL9pnfAt6acK8HX.png" alt="Save Dashboard"></p><p>可以添加不同的指标，指标的取值详见 Spring Boot 应用的 <code>/actuator/prometheus</code> 端点。重复以上步骤操作，即可为 Dashboard 添加新的图表。</p><p>如果你觉得自己定制一个 Dashboard 过于复杂了，那你可以逛一下 <a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">Grafana 的 Dashboard 市场</a>（<a href="https://grafana.com/grafana/dashboards%EF%BC%89%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%96%B9%E4%BE%BF%E5%BF%AB%E6%8D%B7%E5%9C%B0%E5%A4%8D%E7%94%A8%E5%88%AB%E4%BA%BA%E7%B2%BE%E7%BE%8E%E7%9A%84" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards），这样就可以方便快捷地复用别人精美的</a> Dashboard 面板了。</p><p><img src="https://grafana.com/static/img/grafana/showcase_visualize.jpg" alt="Demo"></p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://www.callicoder.com/spring-boot-actuator-metrics-monitoring-dashboard-prometheus-grafana/" target="_blank" rel="noopener">https://www.callicoder.com/spring-boot-actuator-metrics-monitoring-dashboard-prometheus-grafana/</a></li><li><a href="http://www.itmuch.com/spring-boot/actuator-prometheus-grafana/%EF%BC%8Cby" target="_blank" rel="noopener">http://www.itmuch.com/spring-boot/actuator-prometheus-grafana/，by</a> 周立</li><li><a href="https://www.baeldung.com/spring-boot-self-hosted-monitoring" target="_blank" rel="noopener">https://www.baeldung.com/spring-boot-self-hosted-monitoring</a></li><li><a href="https://yunlzheng.gitbook.io/prometheus-book/" target="_blank" rel="noopener">https://yunlzheng.gitbook.io/prometheus-book/</a></li><li><a href="https://micrometer.io/docs/registry/prometheus" target="_blank" rel="noopener">https://micrometer.io/docs/registry/prometheus</a></li><li><a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener">https://prometheus.io/docs/introduction/overview/</a></li><li><a href="https://hub.docker.com/r/prom/prometheus/" target="_blank" rel="noopener">https://hub.docker.com/r/prom/prometheus/</a></li><li><a href="https://grafana.com/docs/grafana/latest/" target="_blank" rel="noopener">https://grafana.com/docs/grafana/latest/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目已托管于 GitHub：&lt;a href=&quot;https://github.com/y0ngb1n/spring-boot-samples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;y0ngb1n/spring-boot-samples&lt;/a&gt;，欢迎 
      
    
    </summary>
    
    
    
      <category term="spring-boot" scheme="https://y0ngb1n.github.io/tags/spring-boot/"/>
    
      <category term="monitoring" scheme="https://y0ngb1n.github.io/tags/monitoring/"/>
    
      <category term="prometheus" scheme="https://y0ngb1n.github.io/tags/prometheus/"/>
    
      <category term="grafana" scheme="https://y0ngb1n.github.io/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 配置多数据源</title>
    <link href="https://y0ngb1n.github.io/a/config-multi-datasource-with-spring-boot.html"/>
    <id>https://y0ngb1n.github.io/a/config-multi-datasource-with-spring-boot.html</id>
    <published>2019-09-20T20:30:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<p>项目已托管于 GitHub：<a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">y0ngb1n/spring-boot-samples</a>，欢迎 Star, Fork 😘</p><hr><h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h2><p><strong>不同数据源的配置要分开</strong></p><p>在 Spring 中，我们需要将两个不同数据源的配置分开。如我们有一个 <code>foo-datasource</code> 和另一个 <code>bar-datasource</code>，那将这两个 DataSource 的所有配置都要分开，不要将它们放在一起，就算它们除了 <code>url</code> 以外其它配置都相同，也建议你将它们分开配置，这样会方便我们以后的配置管理。</p><p><strong>关注每次使用的数据源</strong></p><ul><li>有多个 DataSource 时系统如何判断</li><li>对应的设施（事务、ORM 等）如何选择 DataSource</li></ul><p>在编程的时候，我们要格外地注意当前在操作哪一个数据源，要告诉我们的系统要使用哪一个数据源，事务管理应该启在哪个数据源上面；同时地我们也要告诉相关 ORM（像 Hibernate、MyBatis 类似的设施）此时是在操作哪一个数据源，因为这些框架并没有帮我们考虑得这么周全，所以在编码时一定要格外地小心。</p><h2 id="多数据源配置"><a class="markdownIt-Anchor" href="#多数据源配置"></a> 多数据源配置</h2><p><strong>手工配置两组 DataSource 及相关内容</strong></p><p>如果我们完全地靠手工的配置，排除掉整个 Spring Boot 相关的依赖，全部都交由自己来配置肯定是可以的。</p><p>如果还是想与 Spring Boot 结合在一起的话可以参考下面的两种方式。</p><p><strong>与 Spring Boot 协同工作（二选一）</strong></p><ul><li>方式一：配置 <code>@Primary</code> 类型的 Bean</li><li>方式二：排除 Spring Boot 的自动配置<ul><li><code>DataSourceAutoConfiguration</code></li><li><code>DataSourceTransactionManagerAutoConfiguration</code></li><li><code>JdbcTemplateAutoConfiguration</code></li></ul></li></ul><p><strong>方式一</strong>：Spring 会把配置了 <code>@Primary</code> 的 Bean 作为主要的 Bean，在后面 Spring Boot 相关的自动配置都会环绕这个标志了 <code>@Primary</code> 的 DataSource 进行配置。</p><p><strong>方式二</strong>：如果你觉得这两个 Bean 是没有主次之分、这两个 DataSource 都同等重要的，那么我们可以排除掉方式二所列举的 Bean。把它们排除掉之后，我们可以在代码中自己来控制它，可参考如下代码：</p><p>Step 01：排除 Spring Boot 的自动配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;</span><br><span class="line">  DataSourceAutoConfiguration.class,</span><br><span class="line">  DataSourceTransactionManagerAutoConfiguration.class,</span><br><span class="line">  JdbcTemplateAutoConfiguration.class</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDataSourceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(MultiDataSourceApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Step 02：添加 <code>foo</code>、<code>bar</code> 数据源配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Foo DataSource</span></span><br><span class="line"><span class="attr">foo:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:h2:mem:foo</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">sa</span></span><br><span class="line"><span class="attr">    password:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bar DataSource</span></span><br><span class="line"><span class="attr">bar:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:h2:mem:bar</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">sa</span></span><br><span class="line"><span class="attr">    password:</span></span><br></pre></td></tr></table></figure><p>Step 03: 分别为 <code>foo-datasource</code>、<code>bar-datasource</code> 添加配置，及对应的事务管理器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">// Config Foo DataSource</span></span><br><span class="line">  <span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConfigurationProperties</span>(<span class="string">"foo.datasource"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSourceProperties <span class="title">fooDataSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProperties();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">fooDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DataSourceProperties dataSourceProperties = fooDataSourceProperties();</span><br><span class="line">    log.info(<span class="string">"foo datasource: &#123;&#125;"</span>, dataSourceProperties.getUrl());</span><br><span class="line">    <span class="keyword">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">fooTxManager</span><span class="params">(DataSource fooDataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(fooDataSource);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">// Config Bar DataSource</span></span><br><span class="line">  <span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConfigurationProperties</span>(<span class="string">"bar.datasource"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSourceProperties <span class="title">barDataSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProperties();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">barDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DataSourceProperties dataSourceProperties = barDataSourceProperties();</span><br><span class="line">    log.info(<span class="string">"bar datasource: &#123;&#125;"</span>, dataSourceProperties.getUrl());</span><br><span class="line">    <span class="keyword">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">barTxManager</span><span class="params">(DataSource barDataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(barDataSource);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Step 04: 检验是否配置成功</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mvn spring-boot:run</span></span><br><span class="line">...</span><br><span class="line">2019-09-18 23:57:21.649  INFO 15826 --- [           main] i.g.y.s.m.config.MultiDataSourceConfig   : foo datasource: jdbc:h2:mem:foo</span><br><span class="line">2019-09-18 23:57:21.708  INFO 15826 --- [           main] i.g.y.s.m.config.MultiDataSourceConfig   : bar datasource: jdbc:h2:mem:bar</span><br><span class="line">...</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -s http://localhost:8080/actuator/beans | jq</span></span><br><span class="line">&#123;</span><br><span class="line">  "contexts": &#123;</span><br><span class="line">    "application": &#123;</span><br><span class="line">      "beans": &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        "fooDataSourceProperties": &#123;</span><br><span class="line">          "aliases": [],</span><br><span class="line">          "scope": "singleton",</span><br><span class="line">          "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",</span><br><span class="line">          "resource": "class path resource [io/github/y0ngb1n/samples/multidatasource/config/MultiDataSourceConfig.class]",</span><br><span class="line">          "dependencies": []</span><br><span class="line">        &#125;,</span><br><span class="line">        "fooDataSource": &#123;</span><br><span class="line">          "aliases": [],</span><br><span class="line">          "scope": "singleton",</span><br><span class="line">          "type": "com.zaxxer.hikari.HikariDataSource",</span><br><span class="line">          "resource": "class path resource [io/github/y0ngb1n/samples/multidatasource/config/MultiDataSourceConfig.class]",</span><br><span class="line">          "dependencies": [</span><br><span class="line">            "fooDataSourceProperties"</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "fooTxManager": &#123;</span><br><span class="line">          "aliases": [],</span><br><span class="line">          "scope": "singleton",</span><br><span class="line">          "type": "org.springframework.jdbc.datasource.DataSourceTransactionManager",</span><br><span class="line">          "resource": "class path resource [io/github/y0ngb1n/samples/multidatasource/config/MultiDataSourceConfig.class]",</span><br><span class="line">          "dependencies": [</span><br><span class="line">            "fooDataSource"</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        "barDataSourceProperties": &#123;</span><br><span class="line">          "aliases": [],</span><br><span class="line">          "scope": "singleton",</span><br><span class="line">          "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",</span><br><span class="line">          "resource": "class path resource [io/github/y0ngb1n/samples/multidatasource/config/MultiDataSourceConfig.class]",</span><br><span class="line">          "dependencies": []</span><br><span class="line">        &#125;,</span><br><span class="line">        "barDataSource": &#123;</span><br><span class="line">          "aliases": [],</span><br><span class="line">          "scope": "singleton",</span><br><span class="line">          "type": "com.zaxxer.hikari.HikariDataSource",</span><br><span class="line">          "resource": "class path resource [io/github/y0ngb1n/samples/multidatasource/config/MultiDataSourceConfig.class]",</span><br><span class="line">          "dependencies": [</span><br><span class="line">            "barDataSourceProperties"</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "barTxManager": &#123;</span><br><span class="line">          "aliases": [],</span><br><span class="line">          "scope": "singleton",</span><br><span class="line">          "type": "org.springframework.jdbc.datasource.DataSourceTransactionManager",</span><br><span class="line">          "resource": "class path resource [io/github/y0ngb1n/samples/multidatasource/config/MultiDataSourceConfig.class]",</span><br><span class="line">          "dependencies": [</span><br><span class="line">            "barDataSource"</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        "multiDataSourceConfig": &#123;</span><br><span class="line">          "aliases": [],</span><br><span class="line">          "scope": "singleton",</span><br><span class="line">          "type": "io.github.y0ngb1n.samples.multidatasource.config.MultiDataSourceConfig$$EnhancerBySpringCGLIB$$63c24bed",</span><br><span class="line">          "resource": "file [/Users/yangbin/workspace/coding/Java/spring-boot-samples/spring-boot-samples-multi-datasource/target/classes/io/github/y0ngb1n/samples/multidatasource/config/MultiDataSourceConfig.class]",</span><br><span class="line">          "dependencies": []</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">      &#125;,</span><br><span class="line">      "parentId": null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面可以查看到 Spring 中各 Bean 的依赖关系。</p><p>这样就完成了 Spring Boot 中多数据源的配置。如果我们还有更多的数据源的话，配置也是类似的，参考上面的配置即可。</p><hr><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li><a href="http://gk.link/a/1029F" target="_blank" rel="noopener">http://gk.link/a/1029F</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目已托管于 GitHub：&lt;a href=&quot;https://github.com/y0ngb1n/spring-boot-samples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;y0ngb1n/spring-boot-samples&lt;/a&gt;，欢迎 
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://y0ngb1n.github.io/tags/java/"/>
    
      <category term="spring-boot" scheme="https://y0ngb1n.github.io/tags/spring-boot/"/>
    
      <category term="multi-datasource" scheme="https://y0ngb1n.github.io/tags/multi-datasource/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL 与 Spring Boot 的初体验</title>
    <link href="https://y0ngb1n.github.io/a/getting-started-with-graphql-and-spring-boot.html"/>
    <id>https://y0ngb1n.github.io/a/getting-started-with-graphql-and-spring-boot.html</id>
    <published>2019-08-24T20:37:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<p>项目已托管于 GitHub：<a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">y0ngb1n/spring-boot-samples</a>，欢迎 Star, Fork 😘</p><hr><blockquote><p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p></blockquote><h2 id="定义-schema"><a class="markdownIt-Anchor" href="#定义-schema"></a> 定义 Schema</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># src/main/resources/schema.graphql</span><br><span class="line">schema &#123;</span><br><span class="line">  query: Query</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Query &#123;</span><br><span class="line">  allBooks: [Book]</span><br><span class="line">  book(id: String): Book</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Book &#123;</span><br><span class="line">  isbn: String</span><br><span class="line">  title: String</span><br><span class="line">  publisher: String</span><br><span class="line">  authors: [String]</span><br><span class="line">  publishedDate: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载并解析上面定义的-schema"><a class="markdownIt-Anchor" href="#加载并解析上面定义的-schema"></a> 加载并解析上面定义的 Schema</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphQLService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"classpath:schema.graphql"</span>)</span><br><span class="line">  <span class="keyword">private</span> Resource resource;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Getter</span></span><br><span class="line">  <span class="keyword">private</span> GraphQL graphQL;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> AllBooksDataFetcher allBooksDataFetcher;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> BookDataFetcher bookDataFetcher;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadSchema</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取本地定义的 Schema 文件</span></span><br><span class="line">    File schemaFile = resource.getFile();</span><br><span class="line">    <span class="comment">// 解析 Schema 文件</span></span><br><span class="line">    TypeDefinitionRegistry typeRegistry = <span class="keyword">new</span> SchemaParser().parse(schemaFile);</span><br><span class="line">    RuntimeWiring wiring = buildRuntimeWiring();</span><br><span class="line">    GraphQLSchema schema = <span class="keyword">new</span> SchemaGenerator().makeExecutableSchema(typeRegistry, wiring);</span><br><span class="line">    graphQL = GraphQL.newGraphQL(schema).build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> RuntimeWiring <span class="title">buildRuntimeWiring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RuntimeWiring.newRuntimeWiring()</span><br><span class="line">      .type(<span class="string">"Query"</span>, typeWiring -&gt; typeWiring</span><br><span class="line">        .dataFetcher(<span class="string">"allBooks"</span>, allBooksDataFetcher)</span><br><span class="line">        .dataFetcher(<span class="string">"book"</span>, bookDataFetcher)</span><br><span class="line">      ).build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提供-datafetcher"><a class="markdownIt-Anchor" href="#提供-datafetcher"></a> 提供 DataFetcher</h2><p>相当于提供 Schema 中的 Query 实现：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">  allBooks: [Book]</span><br><span class="line">  book(id: String): Book</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AllBooksDataFetcher</code> 对应实现 <code>allBooks: [Book]</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllBooksDataFetcher</span> <span class="keyword">implements</span> <span class="title">DataFetcher</span>&lt;<span class="title">List</span>&lt;<span class="title">Book</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">get</span><span class="params">(DataFetchingEnvironment dataFetchingEnvironment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookRepository.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BookDataFetcher</code> 对应实现 <code>book(id: String): Book</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDataFetcher</span> <span class="keyword">implements</span> <span class="title">DataFetcher</span>&lt;<span class="title">Book</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Book <span class="title">get</span><span class="params">(DataFetchingEnvironment dataFetchingEnvironment)</span> </span>&#123;</span><br><span class="line">    String isn = dataFetchingEnvironment.getArgument(<span class="string">"id"</span>);</span><br><span class="line">    <span class="keyword">return</span> bookRepository.findById(isn).orElse(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提供-graphql-api"><a class="markdownIt-Anchor" href="#提供-graphql-api"></a> 提供 GraphQL API</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/v1/books"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> GraphQLService graphQLService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">getAllBooks</span><span class="params">(@RequestBody String query)</span> </span>&#123;</span><br><span class="line">    ExecutionResult execute = graphQLService.getGraphQL().execute(query);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(execute, HttpStatus.OK);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动并测试"><a class="markdownIt-Anchor" href="#启动并测试"></a> 启动并测试</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mvn install</span></span><br><span class="line">...</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">...</span><br><span class="line"><span class="meta">$</span><span class="bash"> mvn spring-boot:run</span></span><br><span class="line">...</span><br><span class="line">2019-08-24 19:35:11.700  INFO 14464 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''</span><br><span class="line">2019-08-24 19:35:11.702  INFO 14464 --- [           main] i.g.y.s.graphql.GraphQLApplication       : Started GraphQLApplication in 16.808 seconds (JVM running for 25.601)</span><br></pre></td></tr></table></figure><p><strong>查询部分字段</strong></p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST \</span></span><br><span class="line">  http://127.0.0.1:8080/v1/books \</span><br><span class="line">  -H 'Content-Type: text/plain' \</span><br><span class="line">  -d '&#123;</span><br><span class="line">    allBooks &#123;</span><br><span class="line">      isbn</span><br><span class="line">      title</span><br><span class="line">  &#125;</span><br><span class="line">&#125;' | jq</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   579    0   524  100    55  34933   3666 --:--:-- --:--:-- --:--:-- 38600</span><br><span class="line">&#123;</span><br><span class="line">  "errors": [],</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "allBooks": [</span><br><span class="line">      &#123;</span><br><span class="line">        "isbn": "9787111213826",</span><br><span class="line">        "title": "Java 编程思想（第4版）"</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  "extensions": null,</span><br><span class="line">  "dataPresent": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST \</span></span><br><span class="line">  http://127.0.0.1:8080/v1/books \</span><br><span class="line">  -H 'Content-Type: text/plain' \</span><br><span class="line">  -d '&#123;</span><br><span class="line">    book(id: "9787121362132") &#123;</span><br><span class="line">      title</span><br><span class="line">  &#125;</span><br><span class="line">&#125;' | jq</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   210    0   159  100    51   1691    542 --:--:-- --:--:-- --:--:--  2234</span><br><span class="line">&#123;</span><br><span class="line">  "errors": [],</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "book": &#123;</span><br><span class="line">      "title": "高可用可伸缩微服务架构：基于 Dubbo、Spring Cloud 和 Service Mesh"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "extensions": null,</span><br><span class="line">  "dataPresent": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询全部字段</strong></p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST \</span></span><br><span class="line">  http://127.0.0.1:8080/v1/books \</span><br><span class="line">  -H 'Content-Type: text/plain' \</span><br><span class="line">  -d '&#123;</span><br><span class="line">    allBooks &#123;</span><br><span class="line">      isbn</span><br><span class="line">      title</span><br><span class="line">      authors</span><br><span class="line">      publisher</span><br><span class="line">      publishedDate</span><br><span class="line">  &#125;</span><br><span class="line">&#125;' | jq</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1139    0  1044  100    95    750     68  0:00:01  0:00:01 --:--:--   818</span><br><span class="line">&#123;</span><br><span class="line">  "errors": [],</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "allBooks": [</span><br><span class="line">      &#123;</span><br><span class="line">        "isbn": "9787111213826",</span><br><span class="line">        "title": "Java 编程思想（第4版）",</span><br><span class="line">        "authors": [</span><br><span class="line">          "Bruce Eckel"</span><br><span class="line">        ],</span><br><span class="line">        "publisher": "机械工业出版社",</span><br><span class="line">        "publishedDate": "2007-06-01"</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  "extensions": null,</span><br><span class="line">  "dataPresent": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST \</span></span><br><span class="line">  http://127.0.0.1:8080/v1/books \</span><br><span class="line">  -H 'Content-Type: text/plain' \</span><br><span class="line">  -d '&#123;</span><br><span class="line">    book(id: "9787121362132") &#123;</span><br><span class="line">      title</span><br><span class="line">      authors</span><br><span class="line">      publisher</span><br><span class="line">      publishedDate</span><br><span class="line">  &#125;</span><br><span class="line">&#125;' | jq</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   421    0   320  100   101   312k    98k --:--:-- --:--:-- --:--:--  411k</span><br><span class="line">&#123;</span><br><span class="line">  "errors": [],</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "book": &#123;</span><br><span class="line">      "title": "高可用可伸缩微服务架构：基于 Dubbo、Spring Cloud 和 Service Mesh",</span><br><span class="line">      "authors": [</span><br><span class="line">        "程超",</span><br><span class="line">        "梁桂钊",</span><br><span class="line">        "秦金卫",</span><br><span class="line">        "方志斌",</span><br><span class="line">        "张逸",</span><br><span class="line">        "杜琪",</span><br><span class="line">        "殷琦",</span><br><span class="line">        "肖冠宇"</span><br><span class="line">      ],</span><br><span class="line">      "publisher": "电子工业出版社",</span><br><span class="line">      "publishedDate": "2019-05-01"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "extensions": null,</span><br><span class="line">  "dataPresent": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询多个数据</strong></p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST \</span></span><br><span class="line">  http://127.0.0.1:8080/v1/books \</span><br><span class="line">  -H 'Content-Type: text/plain' \</span><br><span class="line">  -d '&#123;</span><br><span class="line">    allBooks &#123;</span><br><span class="line">      isbn</span><br><span class="line">      title</span><br><span class="line">    &#125;</span><br><span class="line">    book(id: "9787121362132") &#123;</span><br><span class="line">      title</span><br><span class="line">      authors</span><br><span class="line">      publisher</span><br><span class="line">      publishedDate</span><br><span class="line">  &#125;</span><br><span class="line">&#125;' | jq</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   930    0   785  100   145   3866    714 --:--:-- --:--:-- --:--:--  4581</span><br><span class="line">&#123;</span><br><span class="line">  "errors": [],</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "allBooks": [</span><br><span class="line">      &#123;</span><br><span class="line">        "isbn": "9787111213826",</span><br><span class="line">        "title": "Java 编程思想（第4版）"</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "isbn": "9787111421900",</span><br><span class="line">        "title": "深入理解 Java 虚拟机：JVM 高级特性与最佳实践（第2版）"</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "isbn": "9787115221704",</span><br><span class="line">        "title": "重构 改善既有代码的设计（第2版）"</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "isbn": "9787121362132",</span><br><span class="line">        "title": "高可用可伸缩微服务架构：基于 Dubbo、Spring Cloud 和 Service Mesh"</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "isbn": "9787302392644",</span><br><span class="line">        "title": "人月神话（40周年中文纪念版）"</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    "book": &#123;</span><br><span class="line">      "title": "高可用可伸缩微服务架构：基于 Dubbo、Spring Cloud 和 Service Mesh",</span><br><span class="line">      "authors": [</span><br><span class="line">        "程超",</span><br><span class="line">        "梁桂钊",</span><br><span class="line">        "秦金卫",</span><br><span class="line">        "方志斌",</span><br><span class="line">        "张逸",</span><br><span class="line">        "杜琪",</span><br><span class="line">        "殷琦",</span><br><span class="line">        "肖冠宇"</span><br><span class="line">      ],</span><br><span class="line">      "publisher": "电子工业出版社",</span><br><span class="line">      "publishedDate": "2019-05-01"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "extensions": null,</span><br><span class="line">  "dataPresent": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上可见，API 不变只改动了查询的内容，就会自动响应不同的结果。</p><hr><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li><a href="https://graphql.org/" target="_blank" rel="noopener">https://graphql.org/</a></li><li><a href="https://developer.github.com/v4/" target="_blank" rel="noopener">https://developer.github.com/v4/</a></li><li><a href="https://www.baeldung.com/graphql" target="_blank" rel="noopener">https://www.baeldung.com/graphql</a></li><li><a href="https://www.baeldung.com/spring-graphql" target="_blank" rel="noopener">https://www.baeldung.com/spring-graphql</a></li><li><a href="https://youtu.be/zX2I7-aIldE" target="_blank" rel="noopener">https://youtu.be/zX2I7-aIldE</a></li><li><a href="https://leader.js.cool/#/basic/db/graphql" target="_blank" rel="noopener">https://leader.js.cool/#/basic/db/graphql</a></li><li><a href="https://github.com/glennreyes/graphpack" target="_blank" rel="noopener">https://github.com/glennreyes/graphpack</a></li><li><a href="https://www.infoq.cn/article/xZ0ws6_A5jmrJ6ZTPOz8" target="_blank" rel="noopener">全面解析 GraphQL，携程微服务背景下的前后端数据交互方案</a></li><li><a href="https://juejin.im/post/5ca1b7be51882543ea4b7f27" target="_blank" rel="noopener">前端er了解 GraphQL，看这篇就够了</a></li><li><a href="https://www.robinwieruch.de/the-road-to-graphql-book/" target="_blank" rel="noopener">GraphQL 之路</a></li><li><a href="https://www.infoq.cn/article/HfkjC5CdT1XXTsd44b3A" target="_blank" rel="noopener">谈谈 GraphQL 的历史、组件和生态系统</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目已托管于 GitHub：&lt;a href=&quot;https://github.com/y0ngb1n/spring-boot-samples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;y0ngb1n/spring-boot-samples&lt;/a&gt;，欢迎 
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://y0ngb1n.github.io/tags/java/"/>
    
      <category term="spring-boot" scheme="https://y0ngb1n.github.io/tags/spring-boot/"/>
    
      <category term="graphql" scheme="https://y0ngb1n.github.io/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>利用 Spring Boot &amp; Redis 实现短链接服务</title>
    <link href="https://y0ngb1n.github.io/a/build-a-custom-url-shortener-service.html"/>
    <id>https://y0ngb1n.github.io/a/build-a-custom-url-shortener-service.html</id>
    <published>2019-08-21T21:52:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<p>项目已托管于 GitHub：<a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">y0ngb1n/spring-boot-samples</a>，欢迎 Star, Fork 😘</p><hr><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><ul><li>Spring Boot 2.1.0+</li><li>Redis</li><li>Lombok</li><li>Guava 28.0</li><li>Common Validator 1.6</li></ul><h2 id="添加依赖项"><a class="markdownIt-Anchor" href="#添加依赖项"></a> 添加依赖项</h2><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># Redis Config</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">your_password</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">io.github.y0ngb1n.*:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="核心代码"><a class="markdownIt-Anchor" href="#核心代码"></a> 核心代码</h2><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * URL Shortener Resource</span><br><span class="line"> *</span><br><span class="line"> * @author yangbin</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(path = "/v1")</span><br><span class="line">public class UrlShortenerController &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">  @GetMapping(path = "/&#123;id&#125;")</span><br><span class="line">  public String getUrl(@PathVariable String id) &#123;</span><br><span class="line"><span class="addition">+   String url = redisTemplate.opsForValue().get(id);</span></span><br><span class="line">    log.debug("URL Retrieved: &#123;&#125;", url);</span><br><span class="line">    return url;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @PostMapping</span><br><span class="line">  public String create(@RequestBody String url) &#123;</span><br><span class="line">    UrlValidator urlValidator = new UrlValidator(</span><br><span class="line">      new String[]&#123;"http", "https"&#125;</span><br><span class="line">    );</span><br><span class="line">    if (urlValidator.isValid(url)) &#123;</span><br><span class="line"><span class="deletion">-     String id = Hashing.murmur3_32().hashString(url, StandardCharsets.UTF_8).toString();</span></span><br><span class="line">      log.debug("URL Id generated: &#123;&#125;", id);</span><br><span class="line"><span class="addition">+     redisTemplate.opsForValue().set(id, url);</span></span><br><span class="line">      return id;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new RuntimeException("URL Invalid: " + url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a class="markdownIt-Anchor" href="#使用方式"></a> 使用方式</h2><p><strong>Step 0: 安装并启动 Redis</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># on Windows</span></span><br><span class="line">scoop install redis</span><br><span class="line">redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># on Mac</span></span><br><span class="line">brew install redis</span><br><span class="line">redis-server</span><br></pre></td></tr></table></figure><p><strong>Step 1: 启动 <code>url-shortener</code> 服务</strong></p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mvn install</span></span><br><span class="line">...</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">...</span><br><span class="line"><span class="meta">$</span><span class="bash"> mvn spring-boot:run</span></span><br><span class="line">...</span><br><span class="line">2019-08-21 21:03:50.215  INFO 10244 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''</span><br><span class="line">2019-08-21 21:03:50.219  INFO 10244 --- [ main] i.g.y.s.u.UrlShortenerApplication        : Started UrlShortenerApplication in 6.01 seconds (JVM running for 12.165)</span><br></pre></td></tr></table></figure><p><strong>Step 2: 生成短链</strong></p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST http://127.0.0.1:8080/v1 \</span></span><br><span class="line">  -H 'Content-Type: text/plain' \</span><br><span class="line">  -d https://y0ngb1n.github.io</span><br><span class="line">515bbe2b</span><br></pre></td></tr></table></figure><p><strong>Step 3: 还原短链</strong></p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -X GET http://127.0.0.1:8080/v1/515bbe2b</span></span><br><span class="line">https://y0ngb1n.github.io</span><br></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">2019-08-21 21:42:26.788 DEBUG 10244 --- [nio-8080-exec-2] i.g.y.s.u.c.UrlShortenerController       : URL Id generated: 515bbe2b</span><br><span class="line">2019-08-21 21:42:40.748 DEBUG 10244 --- [nio-8080-exec-3] i.g.y.s.u.c.UrlShortenerController       : URL Retrieved: https://y0ngb1n.github.io</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://youtu.be/Zr0E2VP24w8" target="_blank" rel="noopener">https://youtu.be/Zr0E2VP24w8</a></li><li><a href="https://en.wikipedia.org/wiki/MurmurHash" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/MurmurHash</a></li><li><a href="https://github.com/google/guava/wiki/HashingExplained" target="_blank" rel="noopener">https://github.com/google/guava/wiki/HashingExplained</a></li><li><a href="https://www.flyml.net/2016/09/05/cassandra-tutorial-murmurhash/" target="_blank" rel="noopener">https://www.flyml.net/2016/09/05/cassandra-tutorial-murmurhash/</a></li><li><a href="https://hufangyun.com/2017/short-url/" target="_blank" rel="noopener">短网址（Short URL）系统的原理及其实现</a>，by 胡方运</li><li><a href="https://zhangzw.com/20190521.html" target="_blank" rel="noopener">如何快速判断某 URL 是否在一个 20 亿的网址 URL 集合中？</a>，by 张振伟<ul><li>应用场景：<code>黑名单</code>、<code>URL 去重</code>、<code>单词拼写检查</code>、<code>Key-Value 缓存系统的 Key 校验</code>、<code>ID 校验，比如订单系统查询某个订单 ID 是否存在，如果不存在就直接返回</code></li></ul></li><li><a href="https://yuerblog.cc/2017/06/06/unique-id-generator/" target="_blank" rel="noopener">谈谈全局唯一 ID 生成方法</a></li><li><a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="noopener">Leaf — 美团点评分布式 ID 生成系统</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目已托管于 GitHub：&lt;a href=&quot;https://github.com/y0ngb1n/spring-boot-samples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;y0ngb1n/spring-boot-samples&lt;/a&gt;，欢迎 
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://y0ngb1n.github.io/tags/java/"/>
    
      <category term="spring-boot" scheme="https://y0ngb1n.github.io/tags/spring-boot/"/>
    
      <category term="url-shortener" scheme="https://y0ngb1n.github.io/tags/url-shortener/"/>
    
  </entry>
  
  <entry>
    <title>Docker Hub 镜像加速器</title>
    <link href="https://y0ngb1n.github.io/a/docker-registry-mirrors.html"/>
    <id>https://y0ngb1n.github.io/a/docker-registry-mirrors.html</id>
    <published>2019-05-08T12:16:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于 GitHub Gist：<a href="https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6" target="_blank" rel="noopener">https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6</a>，欢迎 Star 😘</p></blockquote><p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务。</p><h2 id="配置加速地址"><a class="markdownIt-Anchor" href="#配置加速地址"></a> 配置加速地址</h2><blockquote><p>Ubuntu 16.04+、Debian 8+、CentOS 7+</p></blockquote><p>创建或修改 <code>/etc/docker/daemon.json</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://1nj0zren.mirror.aliyuncs.com"</span>,</span><br><span class="line">        <span class="string">"https://docker.mirrors.ustc.edu.cn"</span>,</span><br><span class="line">        <span class="string">"http://f1361db2.m.daocloud.io"</span>,</span><br><span class="line">        <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="docker-hub-镜像加速器列表"><a class="markdownIt-Anchor" href="#docker-hub-镜像加速器列表"></a> Docker Hub 镜像加速器列表</h2><table><thead><tr><th>镜像加速器</th><th>镜像加速器地址</th><th>专属加速器<a href="#" title="需登录后获取平台分配的专属加速器">？</a></th><th>其它加速<a href="#" title="支持哪些镜像来源的镜像加速">？</a></th></tr></thead><tbody><tr><td><a href="https://docker-cn.com/registry-mirror" target="_blank" rel="noopener">Docker 中国官方镜像</a></td><td><code>https://registry.docker-cn.com</code></td><td></td><td>Docker Hub</td></tr><tr><td><a href="https://daocloud.io/mirror" target="_blank" rel="noopener">DaoCloud 镜像站</a></td><td><code>http://f1361db2.m.daocloud.io</code></td><td>可登录，系统分配</td><td>Docker Hub</td></tr><tr><td><a href="https://github.com/Azure/container-service-for-azure-china/blob/master/aks/README.md#22-container-registry-proxy" target="_blank" rel="noopener">Azure 中国镜像</a></td><td><code>https://dockerhub.azk8s.cn</code></td><td></td><td>Docker Hub、GCR、Quay</td></tr><tr><td><a href="https://mirrors.ustc.edu.cn/help/dockerhub.html" target="_blank" rel="noopener">科大镜像站</a></td><td><code>https://docker.mirrors.ustc.edu.cn</code></td><td></td><td>Docker Hub、<a href="https://github.com/ustclug/mirrorrequest/issues/91" target="_blank" rel="noopener">GCR</a>、<a href="https://github.com/ustclug/mirrorrequest/issues/135" target="_blank" rel="noopener">Quay</a></td></tr><tr><td><a href="https://cr.console.aliyun.com" target="_blank" rel="noopener">阿里云</a></td><td><code>https://&lt;your_code&gt;.mirror.aliyuncs.com</code></td><td>需登录，系统分配</td><td>Docker Hub</td></tr><tr><td><a href="https://kirk-enterprise.github.io/hub-docs/#/user-guide/mirror" target="_blank" rel="noopener">七牛云</a></td><td><code>https://reg-mirror.qiniu.com</code></td><td></td><td>Docker Hub、GCR、Quay</td></tr><tr><td><a href="https://c.163yun.com/hub" target="_blank" rel="noopener">网易云</a></td><td><code>https://hub-mirror.c.163.com</code></td><td></td><td>Docker Hub</td></tr><tr><td><a href="https://cloud.tencent.com/document/product/457/9113" target="_blank" rel="noopener">腾讯云</a></td><td><code>https://mirror.ccs.tencentyun.com</code></td><td></td><td>Docker Hub</td></tr></tbody></table><h2 id="检查加速器是否生效"><a class="markdownIt-Anchor" href="#检查加速器是否生效"></a> 检查加速器是否生效</h2><p>命令行执行 <code>docker info</code>，如果从结果中看到了如下内容，说明配置成功。</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line"> [...]</span><br><span class="line"> https://registry.docker-cn.com/</span><br></pre></td></tr></table></figure><h2 id="docker-hub-镜像测速"><a class="markdownIt-Anchor" href="#docker-hub-镜像测速"></a> Docker Hub 镜像测速</h2><p>使用镜像前后，可使用 <code>time</code> 统计所花费的总时间。测速前先移除本地的镜像！</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi node:latest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> time docker pull node:latest</span></span><br><span class="line">Pulling repository node</span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line">real   1m14.078s</span><br><span class="line">user   0m0.176s</span><br><span class="line">sys    0m0.120s</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li><a href="https://docs.docker.com/registry/recipes/mirror/" target="_blank" rel="noopener">https://docs.docker.com/registry/recipes/mirror/</a></li><li><a href="https://github.com/yeasy/docker_practice/blob/master/install/mirror.md" target="_blank" rel="noopener">https://github.com/yeasy/docker_practice/blob/master/install/mirror.md</a></li><li><a href="https://github.com/moby/moby/blob/d409b05970e686993e343d226fae5b463d872082/docs/articles/registry_mirror.md" target="_blank" rel="noopener">https://github.com/moby/moby/blob/d409b05970e686993e343d226fae5b463d872082/docs/articles/registry_mirror.md</a></li><li><a href="https://www.fengbohello.top/archives/docker-registry-mirror" target="_blank" rel="noopener">https://www.fengbohello.top/archives/docker-registry-mirror</a></li><li><a href="https://www.ilanni.com/?p=14534" target="_blank" rel="noopener">https://www.ilanni.com/?p=14534</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文首发于 GitHub Gist：&lt;a href=&quot;https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="容器技术" scheme="https://y0ngb1n.github.io/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器技术" scheme="https://y0ngb1n.github.io/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="docker" scheme="https://y0ngb1n.github.io/tags/docker/"/>
    
      <category term="docker-hub" scheme="https://y0ngb1n.github.io/tags/docker-hub/"/>
    
  </entry>
  
  <entry>
    <title>如何定制自己的起步依赖 Spring Boot Starter</title>
    <link href="https://y0ngb1n.github.io/a/coustomize-your-own-spring-boot-starter.html"/>
    <id>https://y0ngb1n.github.io/a/coustomize-your-own-spring-boot-starter.html</id>
    <published>2019-05-02T23:16:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在这里我们一起动手实现一个属于自己的起步依赖</p></blockquote><p><sub>代码托管于 <a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">GitHub</a>，欢迎 Star 😘</sub></p><h2 id="主要内容"><a class="markdownIt-Anchor" href="#主要内容"></a> 主要内容</h2><p>主要加入两个模块，一个是与自动配置相关的模块，如果你的依赖需要做自动配置，那么我们可以在里面写上自动配置。另一个是 <code>starter</code> 模块，它里面就是一些依赖项，首先就是指向我们的 <code>autoconfigure</code> 模块的一个依赖，另外就是当前这个 Starter 所自己需要的依赖项。</p><ul><li><code>autoconfigure</code> 模块，包含自动配置代码</li><li><code>starter</code> 模块，包含指向自动配置模块的依赖及其他相关依赖</li></ul><p>这里说明一下，<code>autoconfigure</code> 并不是必须的，如果当前这个模块并不需要什么自动配置，就可以把它去掉。而 Spring Boot 相关的那些自动配置很多都是集中在 <code>spring-boot-autoconfigure</code> 里面的，所以它只要依赖了 <code>spring-boot-starter</code>，那么就会自动地加入这些 Autoconfigure。</p><h2 id="命名方式"><a class="markdownIt-Anchor" href="#命名方式"></a> 命名方式</h2><p>一般是建议在前面加上一个前缀，主要是与 Spring Boot 官方的那些依赖做区分，如下所示：</p><ul><li>xxx-spring-boot-autoconfigure</li><li>xxx-spring-boot-starter</li></ul><p>这样就可以定义一个你自己的 Spring Boot Starter 了。</p><h2 id="一些注意事项"><a class="markdownIt-Anchor" href="#一些注意事项"></a> 一些注意事项</h2><ul><li><p><strong>不要使用 <code>spring-boot</code> 作为依赖的前缀</strong></p><p>如果你这样做了，会和 Spring Boot 官方的那些依赖混在一起，从而导致不好辨认。</p></li><li><p><strong>不要使用 <code>spring-boot</code> 的配置命名空间</strong></p><p>另外如果你有一些配置，这里也是建议不要使用 Spring Boot 已经在使用的配置命名空间。比方说它里面有 <code>server</code>、<code>management</code> 相关的这些配置项，那么你就不要再使用以 <code>server</code>、<code>management</code> 命名前缀的配置了。</p></li><li><p><code>starter</code> 中仅添加必要的依赖</p><p>在当前这个 Starter 中只加入必要的依赖就可以了。也许这个要求有点苛克，但这里的建议是希望你的依赖不多不少、正正好好，你要使用到哪些依赖就只加这些依赖就好；如果没有必要加进去的就可以去掉它，这样的好处是可以减少最终打出来的包里面的依赖。</p></li><li><p>声明对 <code>spring-boot-starter</code> 的依赖</p><p>如果有需要的可以在这个 Starter 当中加入 <code>spring-boot-starter</code> 这个依赖。这个并不是必须的，因为我们现在很多的工程本身就是 <code>spring-boot</code> 的一个项目，所以它本身就添加了对 <code>spring-boot-starter</code> 的依赖。这个要看你的需要来决定一下是否要添加。</p></li></ul><hr><h2 id="撸起袖子加油干"><a class="markdownIt-Anchor" href="#撸起袖子加油干"></a> 撸起袖子加油干</h2><p>下面我们来看看都有哪些方式可以实现自动配置</p><ul><li><p><strong>传统手工实现的自动配置</strong>（见 <a href="https://github.com/y0ngb1n/spring-boot-samples/tree/master/spring-boot-samples-custom-starter/custom-starter-spring-lt4-autoconfigure" target="_blank" rel="noopener"><code>custom-starter-spring-lt4-autoconfigure</code></a>）</p><blockquote><p><strong>注</strong>：在低版本的 Spring 中能使用这种方式快速实现类似自动配置的功能。</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.y0ngb1n.samples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>custom-starter-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>基于 Spring Boot 的自动配置</strong>（见 <a href="https://github.com/y0ngb1n/spring-boot-samples/tree/master/spring-boot-samples-custom-starter/custom-starter-spring-boot-autoconfigure" target="_blank" rel="noopener"><code>custom-starter-spring-boot-autoconfigure</code></a>）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.y0ngb1n.samples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>custom-starter-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>引用自定义 Starter</strong>（见 <a href="https://github.com/y0ngb1n/spring-boot-samples/tree/master/spring-boot-samples-custom-starter/custom-starter-spring-boot-starter" target="_blank" rel="noopener"><code>custom-starter-spring-boot-starter</code></a>）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.y0ngb1n.samples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>custom-starter-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>运行 <a href="https://github.com/y0ngb1n/spring-boot-samples/tree/master/spring-boot-samples-custom-starter/custom-starter-examples" target="_blank" rel="noopener"><code>custom-starter-examples</code></a> 效果如下：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.1.0.RELEASE)</span><br><span class="line"></span><br><span class="line">2019-05-02 23:15:56.183  INFO 17236 --- [           main] i.g.y.s.d.AutoconfigureDemoApplication   : Starting AutoconfigureDemoApplication on HP with PID 17236 ...</span><br><span class="line">2019-05-02 23:15:56.208  INFO 17236 --- [           main] i.g.y.s.d.AutoconfigureDemoApplication   : No active profile set, falling back to default profiles: default</span><br><span class="line">2019-05-02 23:15:57.198  INFO 17236 --- [           main] i.g.y.s.g.GreetingApplicationRunner      : Initializing GreetingApplicationRunner.</span><br><span class="line">2019-05-02 23:15:57.478  INFO 17236 --- [           main] i.g.y.s.d.AutoconfigureDemoApplication   : Started AutoconfigureDemoApplication in 2.516 seconds (JVM running for 5.501)</span><br><span class="line">2019-05-02 23:15:57.486  INFO 17236 --- [           main] i.g.y.s.g.GreetingApplicationRunner      : Hello everyone! We all like Spring!</span><br></pre></td></tr></table></figure><p>以上就是一个简单的 Starter，在里面加入自己的自动配置和相关的依赖。那么到这里你也可以实现一个属于你的 Starter，从而简化你的 Maven 依赖项。</p><hr><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li><a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">https://github.com/y0ngb1n/spring-boot-samples</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-auto-configuration.html" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-auto-configuration.html</a></li><li><a href="https://medium.com/@alexeynovikov_89393/how-to-write-your-own-spring-boot-starters-566ce5992954" target="_blank" rel="noopener">https://medium.com/@alexeynovikov_89393/how-to-write-your-own-spring-boot-starters-566ce5992954</a></li><li><a href="https://github.com/digitalsonic/geektime-spring-family" target="_blank" rel="noopener">https://github.com/digitalsonic/geektime-spring-family</a></li><li><a href="https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit" target="_blank" rel="noopener">https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit</a></li><li><a href="https://github.com/biezhi/keeper" target="_blank" rel="noopener">https://github.com/biezhi/keeper</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在这里我们一起动手实现一个属于自己的起步依赖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;sub&gt;代码托管于 &lt;a href=&quot;https://github.com/y0ngb1n/spring-boot-samples&quot; target=&quot;_bla
      
    
    </summary>
    
    
    
      <category term="spring-boot" scheme="https://y0ngb1n.github.io/tags/spring-boot/"/>
    
      <category term="starter" scheme="https://y0ngb1n.github.io/tags/starter/"/>
    
  </entry>
  
  <entry>
    <title>如何在低版本的 Spring 中快速实现类似自动配置的功能</title>
    <link href="https://y0ngb1n.github.io/a/coustomize-your-own-autoconfigure-whit-spring-less-than-version-4.html"/>
    <id>https://y0ngb1n.github.io/a/coustomize-your-own-autoconfigure-whit-spring-less-than-version-4.html</id>
    <published>2019-05-02T21:00:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在 Spring 4 后才引入了 <code>@Conditional</code> 等条件注解，它是 Spring Boot 中实现自动配置的最大功臣！<br>那么问题来了：<strong>如果我们还在使用 Spring 3.x 的老版本，这时候要怎么实现一个自动配置呢？</strong></p></blockquote><p><sub>代码托管于 <a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">GitHub</a>，欢迎 Star 😘</sub></p><h2 id="需求和问题"><a class="markdownIt-Anchor" href="#需求和问题"></a> 需求和问题</h2><h3 id="核心的诉求"><a class="markdownIt-Anchor" href="#核心的诉求"></a> 核心的诉求</h3><ul><li>现存系统，不打算重构</li><li>Spring 版本为 3.x，也不打算升级版本和引入 Spring Boot</li><li>期望能够在少改代码的前提下实现功能增强</li></ul><p>比如说：</p><ul><li>希望能够给全站统一添加上日志记录（如：RPC 框架 Web 调用的摘要信息、数据库访问层的摘要信息），这个其实是个通用的功能。</li><li>我们引用了一些基础设施，并想对这些基础设施的功能作进一步的增强，这时候就应该从框架的层面来解决这个问题。</li></ul><h3 id="面临的问题"><a class="markdownIt-Anchor" href="#面临的问题"></a> 面临的问题</h3><ul><li><p>3.x 的 Spring 没有条件注解</p><p>因为没有条件注解，所以我们不清楚在什么时候 需要/不需要 配置这些东西</p></li><li><p>无法自动定位需要加载的自动配置</p><p>此时我们没有办法像 Spring Boot 的自动配置那样让框架自动加载我们的配置，我们要使用一些别的手段让 Spring 可以加载到我们定制的这些功能。</p></li></ul><h2 id="核心解决思路"><a class="markdownIt-Anchor" href="#核心解决思路"></a> 核心解决思路</h2><h3 id="条件判断"><a class="markdownIt-Anchor" href="#条件判断"></a> 条件判断</h3><ul><li>通过 <code>BeanFactoryPostProcessor</code> 进行判断</li></ul><p>Spring 为我们提供了一个扩展点，我们可以通过 <code>BeanFactoryPostProcessor</code> 来解决条件判断的问题，它可以让我们在 <code>BeanFactory</code> 定义完之后、Bean 的初始化之前对我们这些 Bean 的定义做一些后置的处理。可以在这个时候对我们的 Bean 定义做判断，看看当前 存在/缺少 哪些 Bean 的定义，还可以增加一些 Bean 的定义 —— 加入一些自己定制的 Bean。</p><h3 id="配置加载"><a class="markdownIt-Anchor" href="#配置加载"></a> 配置加载</h3><ul><li>编写 Java Config 类</li><li>引入配置类<ul><li>通过 <code>component-scan</code></li><li>通过 XML 文件 <code>import</code></li></ul></li></ul><p>可以考虑编写自己的 Java Config 类，并把它加到 <code>component-scan</code> 里面，然后想办法让现在系统的 <code>component-scan</code> 包含我们编写的 Java Config 类；也可以编写 XML 文件，如果当前系统使用 XML 的方式，那么它加载的路径上是否可以加载我们的 XML 文件，如果不行就可以使用手动 <code>import</code> 这个文件。</p><h2 id="spring-提供的两个扩展点"><a class="markdownIt-Anchor" href="#spring-提供的两个扩展点"></a> Spring 提供的两个扩展点</h2><h3 id="beanpostprocessor"><a class="markdownIt-Anchor" href="#beanpostprocessor"></a> <code>BeanPostProcessor</code></h3><ul><li>针对 Bean 实例</li><li>在 Bean 创建后提供定制逻辑回调</li></ul><h3 id="beanfactorypostprocessor"><a class="markdownIt-Anchor" href="#beanfactorypostprocessor"></a> <code>BeanFactoryPostProcessor</code></h3><ul><li>针对 Bean 定义</li><li>在容器创建 Bean 前获取配置元数据</li><li>Java Config 中需要定义为 <code>static</code> 方法（如果不定义，Spring 在启动时会报一个 <code>warning</code>，你可尝试一下）</li></ul><h2 id="关于-bean-的一些定制"><a class="markdownIt-Anchor" href="#关于-bean-的一些定制"></a> 关于 Bean 的一些定制</h2><blockquote><p>既然上面提到了 Spring 的两个扩展点，这里就延展一下关于 Bean 的一些定制的方式。</p></blockquote><h3 id="lifecycle-callback"><a class="markdownIt-Anchor" href="#lifecycle-callback"></a> Lifecycle Callback</h3><ul><li><p><code>InitializingBean</code> / <code>@PostConstruct</code> / <code>init-method</code></p><p>这部分是关于初始化的，可以在 Bean 的初始化之后做一些定制，这里有三种方式：</p><ul><li>实现 <code>InitializingBean</code> 接口</li><li>使用 <code>@PostConstruct</code> 注解</li><li>在 Bean 定义的 XML 文件里给它指定一个 <code>init-method</code>；亦或者在使用 <code>@Bean</code> 注解时指定 <code>init-method</code></li></ul><p>这些都可以让我们这个 Bean 在创建之后去调用特定的方法。</p></li><li><p><code>DisposableBean</code> / <code>@PreDestroy</code> / <code>destroy-method</code></p><p>这部分是在 Bean 回收的时候，我们该做的一些操作。可以指定这个 Bean 在销毁的时候，如果：</p><ul><li>它实现了 <code>DisposableBean</code> 这个接口，那么 Spring 会去调用它相应的方法</li><li>也可以将 <code>@PreDestroy</code> 注解加在某个方法上，那么会在销毁时调用这个方法</li><li>在 Bean 定义的 XML 文件里给它指定一个 <code>destroy-method</code>；亦或者在使用 <code>@Bean</code> 注解时指定 <code>destroy-method</code>，那么会在销毁时调用这个方法</li></ul></li></ul><h3 id="xxxaware-接口"><a class="markdownIt-Anchor" href="#xxxaware-接口"></a> XxxAware 接口</h3><ul><li><p><code>ApplicationContextAware</code></p><p>可以把整个 <code>ApplicationContext</code> 通过接口进行注入，在这个 Bean 里我们就可以获得一个完整的 <code>ApplicationContext</code>。</p></li><li><p><code>BeanFactoryAware</code></p><p>与 <code>ApplicationContextAware</code> 类似。</p></li><li><p><code>BeanNameAware</code></p><p>可以把 Bean 的名字注入到这个实例中来。</p></li></ul><blockquote><p>如果对源码感兴趣，可见：<code>org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean</code><br>如果当前 Bean 存在 <code>close</code> 或 <code>shutdown</code> 方法名的方法时，会被 Spring 视为 <code>destroy-method</code>，在销毁时会进行调用。</p></blockquote><h2 id="一些常用操作"><a class="markdownIt-Anchor" href="#一些常用操作"></a> 一些常用操作</h2><h3 id="判断类是否存在"><a class="markdownIt-Anchor" href="#判断类是否存在"></a> 判断类是否存在</h3><ul><li><code>ClassUitls.isPresent()</code></li></ul><p>调用 Spring 提供的 <code>ClassUitls.isPresent()</code> 来判断一个类是否存在当前 Class Path 下。</p><h3 id="判断-bean-是否已定义"><a class="markdownIt-Anchor" href="#判断-bean-是否已定义"></a> 判断 Bean 是否已定义</h3><ul><li><code>ListableBeanFactory.containsBeanDefinition()</code>：判断 Bean 是否已定义。</li><li><code>ListableBeanFactory.getBeanNamesForType()</code>：可以查看某些类型的 Bean 都有哪些名字已经被定义了。</li></ul><h3 id="注册-bean-定义"><a class="markdownIt-Anchor" href="#注册-bean-定义"></a> 注册 Bean 定义</h3><ul><li><code>BeanDefinitionRegistry.registerBeanDefinition()</code><ul><li><code>GenericBeanDefinition</code></li></ul></li><li><code>BeanFactory.registerSingleton()</code></li></ul><h2 id="撸起袖子加油干"><a class="markdownIt-Anchor" href="#撸起袖子加油干"></a> 撸起袖子加油干</h2><blockquote><p>理论就科普完了，下面就开始实践。<br>在当前的例子中，我们假定一下当前环境为：<strong>没有使用 Spring Boot 以及高版本的 Spring</strong>。</p></blockquote><p><strong>Step 1：模拟低版本的 Spring 环境</strong></p><p>这里只是简单地引入了 <code>spring-context</code> 依赖，并没有真正的使用 Spring 3.x 的版本，但也没有使用 Spring 4 以上的一些特性。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.y0ngb1n.samples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>custom-starter-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step 2：以实现 <code>BeanFactoryPostProcessor</code> 接口为例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断当前 Class Path 下是否存在所需要的 GreetingApplicationRunner 这么一个类</span></span><br><span class="line">    <span class="keyword">boolean</span> hasClass = ClassUtils</span><br><span class="line">      .isPresent(<span class="string">"io.github.y0ngb1n.samples.greeting.GreetingApplicationRunner"</span>,</span><br><span class="line">        GreetingBeanFactoryPostProcessor.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hasClass) &#123;</span><br><span class="line">      <span class="comment">// 类不存在</span></span><br><span class="line">      log.info(<span class="string">"GreetingApplicationRunner is NOT present in CLASSPATH."</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否存在 id 为 greetingApplicationRunner 的 Bean 定义</span></span><br><span class="line">    <span class="keyword">boolean</span> hasDefinition = beanFactory.containsBeanDefinition(<span class="string">"greetingApplicationRunner"</span>);</span><br><span class="line">    <span class="keyword">if</span> (hasDefinition) &#123;</span><br><span class="line">      <span class="comment">// 当前上下文已存在 greetingApplicationRunner</span></span><br><span class="line">      log.info(<span class="string">"We already have a greetingApplicationRunner bean registered."</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    register(beanFactory);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class="line">      GenericBeanDefinition beanDefinition = <span class="keyword">new</span> GenericBeanDefinition();</span><br><span class="line">      beanDefinition.setBeanClass(GreetingApplicationRunner.class);</span><br><span class="line"></span><br><span class="line">      ((BeanDefinitionRegistry) beanFactory)</span><br><span class="line">        .registerBeanDefinition(<span class="string">"greetingApplicationRunner"</span>, beanDefinition);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      beanFactory.registerSingleton(<span class="string">"greetingApplicationRunner"</span>, <span class="keyword">new</span> GreetingApplicationRunner());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册我们的 Bean（见 <a href="./src/main/java/io/github/y0ngb1n/samples/autoconfigure/CustomStarterAutoConfiguration.java"><code>CustomStarterAutoConfiguration</code></a>），如下有几点是需要注意的：</p><ul><li>这里的方法定义为 <code>static</code></li><li>使用时，如果两项目不是在同个包下，需要主动将当前类加入到项目的 <code>component-scan</code> 里</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomStarterAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GreetingBeanFactoryPostProcessor <span class="title">greetingBeanFactoryPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GreetingBeanFactoryPostProcessor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step 3：验证该自动配置是否生效</strong></p><p>在其他项目中添加依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.y0ngb1n.samples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>custom-starter-spring-lt4-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.y0ngb1n.samples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>custom-starter-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动项目并观察日志（见 <a href="https://github.com/y0ngb1n/spring-boot-samples/tree/master/spring-boot-samples-custom-starter/custom-starter-examples" target="_blank" rel="noopener"><code>custom-starter-examples</code></a>），验证自动配置是否生效了：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.1.0.RELEASE)</span><br><span class="line"></span><br><span class="line">2019-05-02 20:47:27.692  INFO 11460 --- [           main] i.g.y.s.d.AutoconfigureDemoApplication   : Starting AutoconfigureDemoApplication on HP with PID 11460 ...</span><br><span class="line">2019-05-02 20:47:27.704  INFO 11460 --- [           main] i.g.y.s.d.AutoconfigureDemoApplication   : No active profile set, falling back to default profiles: default</span><br><span class="line">2019-05-02 20:47:29.558  INFO 11460 --- [           main] i.g.y.s.g.GreetingApplicationRunner      : Initializing GreetingApplicationRunner.</span><br><span class="line">2019-05-02 20:47:29.577  INFO 11460 --- [           main] i.g.y.s.d.AutoconfigureDemoApplication   : Started AutoconfigureDemoApplication in 3.951 seconds (JVM running for 14.351)</span><br><span class="line">2019-05-02 20:47:29.578  INFO 11460 --- [           main] i.g.y.s.g.GreetingApplicationRunner      : Hello everyone! We all like Spring!</span><br></pre></td></tr></table></figure><p>到这里，已成功在低版本的 Spring 中实现了类似自动配置的功能。👏</p><hr><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li><a href="https://github.com/y0ngb1n/spring-boot-samples" target="_blank" rel="noopener">https://github.com/y0ngb1n/spring-boot-samples</a></li><li><a href="https://github.com/digitalsonic/geektime-spring-family" target="_blank" rel="noopener">https://github.com/digitalsonic/geektime-spring-family</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在 Spring 4 后才引入了 &lt;code&gt;@Conditional&lt;/code&gt; 等条件注解，它是 Spring Boot 中实现自动配置的最大功臣！&lt;br&gt;
那么问题来了：&lt;strong&gt;如果我们还在使用 Spring 3.x 的老版本，这时
      
    
    </summary>
    
    
    
      <category term="spring-boot" scheme="https://y0ngb1n.github.io/tags/spring-boot/"/>
    
      <category term="spring" scheme="https://y0ngb1n.github.io/tags/spring/"/>
    
      <category term="autoconfigure" scheme="https://y0ngb1n.github.io/tags/autoconfigure/"/>
    
  </entry>
  
  <entry>
    <title>将闲置电脑升级为个人服务器 Ubuntu 18.04.2 LTS (Bionic Beaver)</title>
    <link href="https://y0ngb1n.github.io/a/how-to-install-ubuntu-server-18-04-lts.html"/>
    <id>https://y0ngb1n.github.io/a/how-to-install-ubuntu-server-18-04-lts.html</id>
    <published>2019-04-21T09:32:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>由于鸿哥大学遗留下来一部尘封的台式主机，放着积灰还不如拿来给我折腾，让它能发光发热。所以，经过鸿哥同意后，我决定将系统换成 <code>Ubuntu 18.04.2 LTS (Bionic Beaver)</code> 的 Server 版本，搭建家用兼顾学习和娱乐的环境，主要用于开发学习（瞎折腾）的服务器使用 👊。</p><p>将用来搭建我的 <a href="https://github.com/y0ngb1n/dockerized" target="_blank" rel="noopener"><code>Home Lab</code></a>，运行一些包括但不仅限于以下的服务：</p><table><thead><tr><th>服务</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://github.com/y0ngb1n/dockerized/tree/master/nginx-proxy" target="_blank" rel="noopener">nginx-proxy</a></td><td>基于 Docker 的自动化网关</td></tr><tr><td><a href="https://github.com/y0ngb1n/dockerized/tree/master/pi-hole" target="_blank" rel="noopener">Pi-hole</a></td><td>过滤家中广告</td></tr><tr><td>GitLab</td><td>私人代码仓库</td></tr><tr><td>Jenkins</td><td>持续集成引擎</td></tr><tr><td>Bitwarden</td><td>私人密码管家</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>更多的服务后续会在「<a href="https://github.com/y0ngb1n/dockerized" target="_blank" rel="noopener">y0ngb1n/dockerized</a>」进行维护，欢迎 Star 🌟。</p><h2 id="获取-ubuntu-系统"><a class="markdownIt-Anchor" href="#获取-ubuntu-系统"></a> 获取 Ubuntu 系统</h2><p>可以使用下面任一源进行获取 <code>Ubuntu 18.04.2 LTS (Bionic Beaver)</code> 系统镜像：</p><table><thead><tr><th>来源</th><th>站点</th></tr></thead><tbody><tr><td>Ubuntu 官网</td><td><a href="http://releases.ubuntu.com/18.04/" target="_blank" rel="noopener">http://releases.ubuntu.com/18.04/</a></td></tr><tr><td>阿里巴巴开源镜像站</td><td><a href="https://mirrors.aliyun.com/ubuntu-releases/18.04/" target="_blank" rel="noopener">https://mirrors.aliyun.com/ubuntu-releases/18.04/</a></td></tr><tr><td>清华大学开源软件镜像站</td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/18.04/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/18.04/</a></td></tr></tbody></table><p>当前我要下载的文件名为 <code>ubuntu-18.04.2-live-server-amd64.iso</code>，下载地址为 <code>https://mirrors.aliyun.com/ubuntu-releases/18.04/ubuntu-18.04.2-live-server-amd64.iso</code>，使用阿里巴巴开源镜像站的源，文件大小为 <code>834.00 MB</code>。</p><h2 id="安装-ubuntu-系统"><a class="markdownIt-Anchor" href="#安装-ubuntu-系统"></a> 安装 Ubuntu 系统</h2><p>安装系统前，先要准备一个容量大于 4G 的 U 盘、一款趁手的镜像刻录工具（我选 Etcher）。</p><h3 id="step-1获取-etcher"><a class="markdownIt-Anchor" href="#step-1获取-etcher"></a> Step 1：获取 <a href="https://etcher.io/" target="_blank" rel="noopener">Etcher</a></h3><blockquote><p>Flash OS images to SD cards &amp; USB drives, safely and easily.</p></blockquote><p>Etcher 是一款<a href="https://github.com/balena-io/etcher" target="_blank" rel="noopener">开源</a>的快速刻录软件，用它可以快速制作 U 盘镜像工具。它简单到只有一个高颜值的界面，它能够帮助你将系统镜像文件（如 <code>.iso, .img, .dmg, .zip</code> 等格式）快速烧录进 USB 设备（U 盘）或者 SD 卡中。<a href="https://etcher.io/" target="_blank" rel="noopener">这可下载 Etcher 的最新版本</a></p><p><img src="https://i.loli.net/2019/05/03/5ccc061b0088b.png" alt="Etcher App"></p><p>界面简洁，操作简单，分三步走：</p><ol><li>选择镜像文件</li><li>选择磁盘</li><li>开始烧录</li></ol><h3 id="step-2制作系统启动盘"><a class="markdownIt-Anchor" href="#step-2制作系统启动盘"></a> Step 2：制作系统启动盘</h3><p>先将 U 盘连接上电脑，然后打开 Etcher，并选择刚下载好的系统镜像和 U 盘，然后点击 <code>Flash!</code> 按钮，剩下的就留给 Etcher 帮你完成就好了。</p><h3 id="step-3刷入-ubuntu-系统"><a class="markdownIt-Anchor" href="#step-3刷入-ubuntu-系统"></a> Step 3：刷入 Ubuntu 系统</h3><p>先将要刷入系统的主机断电，并将 U 盘、键盘、显示器连接上。通电后进行开机，此时连按 <code>Escape</code>, <code>F2</code>, <code>F10</code>, <code>F12</code> 或者留意屏幕上的提示（此处不同机子不一样，具体可自行 Google），我的是华硕的主板，开机时提示我可以点 <code>F2</code> 或 <code>DEL</code> 键进行 BIOS 系统，主要是设置我们的 U 盘作为第一启动盘，优先加载 U 盘，这样我们就能刷系统了。</p><p>成功进行 U 盘后可以参考由 Ubuntu 提供的安装指南「<a href="https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-server" target="_blank" rel="noopener">Install Ubuntu Server</a>」进行安装操作了。在设置镜像一步时你可使用阿里云的公共镜像服务，输入 <code>http://mirrors.aliyun.com/ubuntu/</code> 即可，这样可加速你的安装过程，否则会默认走官方源。</p><p>最后就是等待安装完毕了！👏 对，等就行了。</p><h3 id="step-4登入系统"><a class="markdownIt-Anchor" href="#step-4登入系统"></a> Step 4：登入系统</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh yangbin@192.168.31.188</span></span><br><span class="line">yangbin@ubuntu:~$ lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 18.04.2 LTS</span><br><span class="line">Release:        18.04</span><br><span class="line">Codename:       bionic</span><br></pre></td></tr></table></figure><p>到此就大功告成了！🐶</p><hr><h2 id="配置系统的基础环境"><a class="markdownIt-Anchor" href="#配置系统的基础环境"></a> 配置系统的基础环境</h2><p>安装完系统后，来做一些简单的配置。</p><h3 id="配置软件源"><a class="markdownIt-Anchor" href="#配置软件源"></a> 配置软件源</h3><p>推荐使用阿里云的源，先创建自己的配置文件，比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/apt/sources.list.d/aliyun.list</span><br></pre></td></tr></table></figure><p>编辑内容如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>然后执行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>即可。</p><h3 id="配置时区"><a class="markdownIt-Anchor" href="#配置时区"></a> 配置时区</h3><p>不要忘记配置系统时区，尤其是现在流行将系统时区配置挂载到容器中。</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dpkg-reconfigure tzdata  <span class="comment">#使用命令行交互界面修改</span></span></span><br><span class="line"></span><br><span class="line">Current default time zone: 'Asia/Shanghai'</span><br><span class="line">Local time is now:      Fri May  3 20:59:14 CST 2019.</span><br><span class="line">Universal Time is now:  Fri May  3 12:59:14 UTC 2019.</span><br></pre></td></tr></table></figure><h3 id="安装容器环境"><a class="markdownIt-Anchor" href="#安装容器环境"></a> 安装容器环境</h3><p><strong>一键安装 Docker</strong></p><p>使用阿里云加速安装 Docker：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; \</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p>启动 Docker CE</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker &amp;&amp; \</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p><strong>一键安装 Compose</strong></p><p>Compose 既然是一个 Python 应用，自然也可以直接用容器来执行它：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> DOCKER_COMPOSE_VERSION=1.24.0</span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/<span class="variable">$&#123;DOCKER_COMPOSE_VERSION&#125;</span>/run.sh &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p><strong>配置容器镜像源</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker &amp;&amp; touch /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><hr><blockquote><p>更多配置可参考「<a href="https://soulteary.com/2019/04/06/configure-ubuntu-18-04.html" target="_blank" rel="noopener">Ubuntu 18.04 基础系统配置</a>」解锁更多姿势。</p></blockquote><hr><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li><a href="https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-server" target="_blank" rel="noopener">https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-server</a></li><li><a href="https://www.qingsword.com/qing/1258.html" target="_blank" rel="noopener">https://www.qingsword.com/qing/1258.html</a></li><li><a href="https://www.wikihow.com/Install-Ubuntu-Server" target="_blank" rel="noopener">https://www.wikihow.com/Install-Ubuntu-Server</a></li><li><a href="https://mk-dir.com/installing-ubuntu-server-old-pc/" target="_blank" rel="noopener">https://mk-dir.com/installing-ubuntu-server-old-pc/</a></li><li><a href="https://www.ceos3c.com/open-source/install-ubuntu-server-18-04-lts/" target="_blank" rel="noopener">https://www.ceos3c.com/open-source/install-ubuntu-server-18-04-lts/</a></li><li><a href="https://www.youtube.com/watch?v=w5W_48vyC6U" target="_blank" rel="noopener">https://www.youtube.com/watch?v=w5W_48vyC6U</a></li><li><a href="https://www.youtube.com/watch?v=vt5Lu_ltPkU" target="_blank" rel="noopener">https://www.youtube.com/watch?v=vt5Lu_ltPkU</a></li><li><a href="https://soulteary.com/2019/04/06/configure-ubuntu-18-04.html" target="_blank" rel="noopener">https://soulteary.com/2019/04/06/configure-ubuntu-18-04.html</a></li><li><a href="https://medium.com/@killyourfm/the-beginners-guide-to-installing-ubuntu-linux-18-04-lts-6c8230036d84" target="_blank" rel="noopener">https://medium.com/@killyourfm/the-beginners-guide-to-installing-ubuntu-linux-18-04-lts-6c8230036d84</a></li><li><a href="https://mirrors.ustc.edu.cn/help/dockerhub.html" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/help/dockerhub.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;由于鸿哥大学遗留下来一部尘封的台式主机，放着积灰还不如拿来给我折腾，让它能发光发热。所以，经过鸿哥同意后，我决定将系统换成 &lt;code&gt;Ubun
      
    
    </summary>
    
    
    
      <category term="ubuntu" scheme="https://y0ngb1n.github.io/tags/ubuntu/"/>
    
      <category term="linux" scheme="https://y0ngb1n.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 镜像瘦身 &amp; 优化</title>
    <link href="https://y0ngb1n.github.io/a/8df8f831.html"/>
    <id>https://y0ngb1n.github.io/a/8df8f831.html</id>
    <published>2019-04-20T22:00:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为什么在存储如此便宜的今天我们仍然需要对 Docker 镜像进行瘦身？</p></blockquote><h2 id="小镜像的优点"><a class="markdownIt-Anchor" href="#小镜像的优点"></a> 小镜像的优点</h2><ol><li>加速构建/部署<br>虽然存储资源较为廉价，但是网络 IO 是有限的，在带宽有限的情况下，部署一个 <code>1G</code> 的镜像和 <code>10M</code> 的镜像带来的时间差距可能就是分钟级和秒级的差距。特别是在出现故障，服务被调度到其他节点时，这个时间尤为宝贵</li><li>提高安全性，减少攻击面积<br>越小的镜像表示无用的程序越少，可以大大的减少被攻击的目标</li><li>减少存储开销</li></ol><h2 id="小镜像的制作原则"><a class="markdownIt-Anchor" href="#小镜像的制作原则"></a> 小镜像的制作原则</h2><ol><li>选用最小的基础镜像</li><li>减少层，去除非必要的文件<br>在实际制作镜像的过程中，一味的合并层不可取，需要学会充分的利用 Docker 的缓存机制，提取公共层，加速构建<ul><li>依赖文件和实际的代码文件单独分层</li><li>团队/公司采用公共的基础镜像等</li></ul></li><li>使用多阶段构建<br>往往我们在构建阶段和实际运行阶段需要的依赖环境是不同的，例如 <code>Golang</code> 编写的程序实际运行的时候仅仅需要一个二进制文件即可，对于 <code>Node.js</code> 来说，可能最后运行的只是一些打包之后的 <code>js</code> 文件而不需要包含 <code>node_modules</code> 里成千上万的依赖</li></ol><h2 id="基础镜像"><a class="markdownIt-Anchor" href="#基础镜像"></a> 基础镜像</h2><ul><li><p><a href="https://github.com/GoogleCloudPlatform/distroless" target="_blank" rel="noopener">distroless</a></p><blockquote><p>“Distroless” images contain only your application and its runtime dependencies. They do not contain package managers, shells or any other programs you would expect to find in a standard Linux distribution.</p></blockquote><p><code>distroless</code> 是 Google 推出的一个仅仅包含运行时环境，不包含包管理器，<code>shell</code> 等其他程序。如果你的程序没有其他依赖的话，这是一个不错的选择</p></li><li><p><a href="https://hub.docker.com/_/alpine" target="_blank" rel="noopener">alpine</a></p><blockquote><p>Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.</p></blockquote><p><code>alpine</code> 是一个基于 <code>musl</code>，<code>busybox</code> 的安全的 Linux 发行版。麻雀虽小五脏俱全，虽然不到 10M, 但是包含了一个包管理器和 <code>shell</code> 环境，这在我们实际的使用调试当中将非常有用。但是请注意，由于 <code>alpine</code> 使用了更小的 <code>muslc</code> 替代 <code>glibc</code>，会导致某些应用无法使用，需要重新编译</p></li><li><p><a href="https://hub.docker.com/_/scratch" target="_blank" rel="noopener">scratch</a><br><code>scratch</code> 是空白镜像，一般用于基础镜像构建，例如 <code>alpine</code> 镜像的 <code>Dockerfile</code> 便是从 <code>scratch</code> 开始的</p>  <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> alpine-minirootfs-20190228-x86_64.tar.gz /</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"/bin/sh"</span>]</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://hub.docker.com/_/busybox" target="_blank" rel="noopener">busybox</a></p></li></ul><p>一般而言，<code>distroless</code> 相对会更加的安全，但是在实际使用的过程中可能会遇到添加依赖以及调试方面的问题，<code>alpine</code> 更小，自带包管理器，更加贴合使用习惯，但是 <code>muslc</code> 可能会带来兼容性的问题，一般而言我会选择 <code>alpine</code> 作为基础镜像使用。除此之外，在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a> 当中我们可以发现常用的 <code>debian</code> 的镜像也会提供的只包含基础功能的小镜像</p><h2 id="基础镜像对比"><a class="markdownIt-Anchor" href="#基础镜像对比"></a> 基础镜像对比</h2><p>此处直接拉取基础镜像，查看镜像大小， 通过观察我们可以发现， <code>alpine</code> 只有 5M 左右为 <code>debian</code> 的 20 分之一</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">alpine      latest    5cb3aa00f899        3 weeks ago         5.53MB</span><br><span class="line">debian      latest    0af60a5c6dd0        3 weeks ago         101MB</span><br><span class="line">ubuntu      18.04     47b19964fb50        7 weeks ago         88.1MB</span><br><span class="line">ubuntu      latest    47b19964fb50        7 weeks ago         88.1MB</span><br><span class="line">alpine      3.8       3f53bb00af94        3 months ago        4.41MB</span><br></pre></td></tr></table></figure><p>似乎从上面看，感觉差距不大，实践中，不同语言的基础镜像都会提供一些采用不同基础镜像制作的 <code>tag</code>，下面我们以 <code>ruby</code> 的镜像为例，查看不同基础镜像的差异。可以看到默认的 <code>latest</code> 镜像 <code>881MB</code> 而 <code>alpine</code> 仅仅只有不到 <code>50MB</code> 这个差距就十分的可观了</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ruby   latest   a5d26127d8d0        4 weeks ago         881MB</span><br><span class="line">ruby   alpine   8d8f7d19d1fa        4 weeks ago         47.8MB</span><br><span class="line">ruby   slim     58dd4d3c99da        4 weeks ago         125MB</span><br></pre></td></tr></table></figure><h2 id="减少层去除非必要的文件"><a class="markdownIt-Anchor" href="#减少层去除非必要的文件"></a> 减少层，去除非必要的文件</h2><ol><li><p>删除文件不要跨行</p> <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dockerfile 1</span></span><br><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget https://github.com/mohuishou/scuplus-wechat/archive/1.0.0.zip</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># dockerfile 2</span></span></span><br><span class="line"><span class="bash">FROM alpine</span></span><br><span class="line"><span class="bash">RUN wget https://github.com/mohuishou/scuplus-wechat/archive/1.0.0.zip</span></span><br><span class="line"><span class="bash">RUN rm 1.0.0.zip</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># dockerfile 3</span></span></span><br><span class="line"><span class="bash">FROM alpine</span></span><br><span class="line"><span class="bash">RUN wget https://github.com/mohuishou/scuplus-wechat/archive/1.0.0.zip &amp;&amp; rm 1.0.0.zip</span></span><br></pre></td></tr></table></figure> <figure class="highlight console"><table><tr><td class="code"><pre><span class="line">test   3  351a80e99c22        5 seconds ago        5.53MB</span><br><span class="line">test   2  ad27e625b8e5        49 seconds ago       6.1MB</span><br><span class="line">test   1  165e2e0df1d3        About a minute ago   6.1MB</span><br></pre></td></tr></table></figure><p>可以发现 1，2 两个大小一样，但是 3 小了 0.5MB，这是因为 <code>docker</code> 几乎每一行命令都会生成一个层，删除文件的时候：因为底下各层都是只读的，当需要删除这些层中的文件时，<code>AUFS</code> 使用 <code>whiteout</code> 机制，它的实现是通过在上层的可写的目录下建立对应的 <code>whiteout</code> 隐藏文件来实现的，所以在当前层去删除上一层的文件，只是会把这个文件隐藏掉罢了</p></li><li><p>使用单行命令<br>除了删除语句需要放在一行以外，由于层的机制，我们安装依赖的一些公共的语句最好也使用条RUN命令生成，减少最终的层数</p></li><li><p>分离依赖包，以及源代码程序，充分利用层的缓存<br>这是一个最佳实践，在实际的开发过程中，我们的依赖包往往是变动不大的，但是我们正在开发的源码的变动是较为频繁，如果我们实际的代码只有 <code>10M</code>，但是依赖项有 <code>1G</code>, 如果在 <code>COPY</code> 的时候直接 <code>COPY ...</code> 会导致每次修改代码都会时这一层的缓存失效，导致浪费复制以及推送到镜像仓库的时间，将 <code>COPY</code> 语句分开，每次 <code>push</code> 就可以只变更我们频繁修改的代码层，而不是连着依赖一起</p></li><li><p>使用 <code>.dockerignore</code><br>在使用 <code>Git</code> 时，我们可以通过 <code>.gitignore</code> 忽略文件，在 <code>docker build</code> 的时候也可以使用 <code>.dockerignore</code> 在 Docker 上下文中忽略文件，这样不仅可以减少一些非必要文件的导入，也可以提高安全性，避免将一些配置文件打包到镜像中</p></li></ol><h2 id="多阶段构建"><a class="markdownIt-Anchor" href="#多阶段构建"></a> 多阶段构建</h2><p>多阶段构建其实也是减少层的一种，通过多阶段构建，最终镜像可以仅包含最后生成的可执行文件，和必须的运行时依赖，大大减少镜像体积</p><p>以 <code>GO</code> 语言为例，实际运行的过程中只需要最后编译生成的二进制文件即可，而 <code>GO</code> 语言本省以及扩展包，代码文件都是不必要的，但是我们在编译的时候这些依赖又是必须的，这时候就可以使用多阶段构建的方式，减少最终生成的镜像体积</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 golang 镜像作为 builder 镜像</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.12</span> as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/github.com/go/helloworld/</span></span><br><span class="line"><span class="bash">COPY app.go .</span></span><br><span class="line"><span class="bash">RUN go build -o app .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 编译完成之后使用 alpine 镜像作为最终的基础镜像</span></span></span><br><span class="line"><span class="bash">FROM alpine:latest as prod</span></span><br><span class="line"><span class="bash">RUN apk --no-cache add ca-certificates</span></span><br><span class="line"><span class="bash">WORKDIR /root/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 从 builder 中复制编译好的二进制文件</span></span></span><br><span class="line"><span class="bash">COPY --from=builder /go/src/github.com/go/helloworld/app .</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"./app"</span>]</span></span><br></pre></td></tr></table></figure><p>由于本文篇幅较长，这里不对多阶段构建展开讲解，详情可以参考：<a href="https://yeasy.gitbooks.io/docker_practice/image/multistage-builds/#%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%9E%84%E5%BB%BA" target="_blank" rel="noopener">多阶段构建</a></p><h2 id="奇淫技巧"><a class="markdownIt-Anchor" href="#奇淫技巧"></a> 奇淫技巧</h2><ol><li><p>使用 <a href="https://github.com/wagoodman/dive" target="_blank" rel="noopener"><code>dive</code></a> 查看 Docker 镜像的层，可以帮助你分析减少镜像体积</p></li><li><p>使用 <a href="https://github.com/docker-slim/docker-slim" target="_blank" rel="noopener"><code>docker-slim</code></a> 可以自动帮助你减少镜像体积，对于 Web 应用较为有用</p></li><li><p>安装软件时去除依赖</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">apt-get install -y — no-install-recommends</span><br><span class="line"></span><br><span class="line"><span class="comment"># alpine</span></span><br><span class="line">apk add --no-cache &amp;&amp;  apk del build-dependencies</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum install -y ... &amp;&amp; yum clean all</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>--flatten</code> 参数，减少层（不推荐）</p></li><li><p>使用 <code>docker-squash</code> 压缩层</p></li></ol><h2 id="不同语言的示例"><a class="markdownIt-Anchor" href="#不同语言的示例"></a> 不同语言的示例</h2><h3 id="rubyrails"><a class="markdownIt-Anchor" href="#rubyrails"></a> Ruby(Rails)</h3><ol><li><p>只安装生产所需的依赖</p></li><li><p>删除不需要的依赖文件</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bundle install --without development:<span class="built_in">test</span>:assets -j4 --retry 3 --path=vendor/bundle \</span><br><span class="line">    <span class="comment"># Remove unneeded files (cached *.gem, *.o, *.c)</span></span><br><span class="line">    &amp;&amp; rm -rf vendor/bundle/ruby/2.5.0/cache/*.gem \</span><br><span class="line">    &amp;&amp; find vendor/bundle/ruby/2.5.0/gems/ -name <span class="string">"*.c"</span> -delete \</span><br><span class="line">    &amp;&amp; find vendor/bundle/ruby/2.5.0/gems/ -name <span class="string">"*.o"</span> -delete</span><br></pre></td></tr></table></figure></li><li><p>删除前端的 <code>node_modules</code> 以及缓存文件</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf node_modules tmp/cache app/assets vendor/assets spec</span><br></pre></td></tr></table></figure></li></ol><p>上述内容可以结合多阶段构建实现</p><h3 id="golang"><a class="markdownIt-Anchor" href="#golang"></a> Golang</h3><p><code>Golang</code> 在使用多阶段构建之后，只剩下了一个二进制文件，这时候再要优化，就只有使用 <code>upx</code> 之类的工具压缩二进制文件的体积了</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="http://dockone.io/article/8174" target="_blank" rel="noopener">Docker 容器镜像瘦身的三个小窍门</a></li><li><a href="https://liulantao.com/docker-base-images.html" target="_blank" rel="noopener">基础镜像 | 再谈 Docker 瘦身</a></li><li><a href="https://liulantao.com/docker-best-practices-mindmap.html" target="_blank" rel="noopener">《Docker 最佳实践》导图</a></li><li><a href="https://legacy.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="noopener">Docker —— 从入门到实践</a></li><li><a href="https://jingwei.link/2018/07/18/docker-namespace-cgroups-aufs.html#aufs" target="_blank" rel="noopener">Docker 基本原理简析</a></li><li><a href="https://medium.com/@lemuelbarango/ruby-on-rails-smaller-docker-images-bff240931332" target="_blank" rel="noopener">Ruby on Rails — Smaller docker images</a></li></ul><hr><blockquote><p>本文作者：mohuishou <br>原文链接：<a href="https://lailin.xyz/post/51252.html" target="_blank" rel="noopener">https://lailin.xyz/post/51252.html</a> <br>版权声明：版权归作者所有，转载请注明出处！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;为什么在存储如此便宜的今天我们仍然需要对 Docker 镜像进行瘦身？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;小镜像的优点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#小镜像的优点&quot;&gt;&lt;/a&gt; 小镜像的优
      
    
    </summary>
    
    
      <category term="容器技术" scheme="https://y0ngb1n.github.io/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器技术" scheme="https://y0ngb1n.github.io/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="docker" scheme="https://y0ngb1n.github.io/tags/docker/"/>
    
      <category term="转载" scheme="https://y0ngb1n.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 搭建个人博客 #05 利用 Travis CI 帮你自动部署</title>
    <link href="https://y0ngb1n.github.io/a/5c7519f9.html"/>
    <id>https://y0ngb1n.github.io/a/5c7519f9.html</id>
    <published>2019-01-18T11:43:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-travis-ci"><a class="markdownIt-Anchor" href="#什么是-travis-ci"></a> 什么是 Travis CI？</h2><blockquote><p><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a> 是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在 GitHub 托管的代码。这个软件的代码同时也是<a href="https://github.com/travis-ci/travis-ci" target="_blank" rel="noopener">开源</a>的，可以<a href="https://github.com/travis-ci/travis-ci" target="_blank" rel="noopener">在 GitHub 上下载到</a>，尽管开发者当前并不推荐在闭源项目中单独使用它。</p><p>它提供了多种编程语言的支持，包括 Ruby、JavaScript、Java、Scala、PHP、Haskell 和 Erlang 在内的多种语言。许多知名的开源项目使用它来在每次提交的时候进行构建测试，比如 Ruby on Rails，Ruby 和 Node.js。</p></blockquote><p>目前 Travis CI 两个站点，提供不同的服务：</p><table><thead><tr><th>版本</th><th>主页</th><th>特色</th></tr></thead><tbody><tr><td>免费版</td><td><a href="https://travis-ci.org/" target="_blank" rel="noopener">https://travis-ci.org/</a></td><td>为开源项目提供免费服务</td></tr><tr><td>收费版</td><td><a href="https://travis-ci.com/" target="_blank" rel="noopener">https://travis-ci.com/</a></td><td>可以部署 GitHub 私有仓库</td></tr></tbody></table><p>两个站点只能看到各自的项目，不能通用，按需选用。</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><p>首先，访问官方网站 <a href="https://travis-ci.org/" target="_blank" rel="noopener">travis-ci.org</a>，点击右上角的登入按钮，使用 GitHub 账户登入 Travis CI。</p><p>Travis 会列出 GitHub 上面你的所有仓库，以及你所属于的组织。此时，选择你需要 Travis 帮你构建的仓库，打开仓库旁边的开关。一旦激活了一个仓库，Travis 会监听这个仓库的所有变化。</p><p align="center">  <img src="https://i.loli.net/2019/01/17/5c4036203a833.png" alt="travis github repo"></p><h2 id="travisyml"><a class="markdownIt-Anchor" href="#travisyml"></a> .travis.yml</h2><p>Travis 要求项目的根目录下面，必须有一个 <code>.travis.yml</code> 文件。这是配置文件，指定了 Travis 的行为。该文件必须保存在 GitHub 仓库里面，一旦代码仓库有新的 Commit，Travis 就会去找这个文件，执行里面的命令。</p><p><code>.travis.yml</code>：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span>             <span class="comment"># 指定语言环境</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">'8.9.3'</span>              <span class="comment"># 指定 NodeJS 版本</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span>                    <span class="comment"># 指定 npm 缓存方案，会缓存 $HOME/.npm 或 node_modules 文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dist:</span> <span class="string">trusty</span>                  <span class="comment"># 指定系统版本，trusty 是指 Ubuntu 14.04 发行版的名称</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span>                <span class="comment"># 是否需要 sudo 权限</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span>                     <span class="comment"># 指定要构建的分支</span></span><br><span class="line"><span class="attr">  only:</span>                       <span class="comment"># only 表示只构建以下分支</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">source</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span>               <span class="comment"># install 阶段之前执行</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">hexo-cli</span>   <span class="comment"># 全局安装 Hexo 命令行工具</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span>                      <span class="comment"># 在安装项目环境阶段需要运行的命令，一条一行，类似的还有 before_install</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span>               <span class="comment"># 安装 package.json 中的依赖</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span>                       <span class="comment"># 在构建阶段需要运行的命令，一条一行，类似的还有 before_script、after_script</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">generate</span>             <span class="comment"># Hexo 常规命令，执行清理和生成</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span>                <span class="comment"># script 阶段成功时执行，构建失败不会执行，其他同上</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--local</span> <span class="string">user.name</span> <span class="string">"travis-ci"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--local</span> <span class="string">user.email</span> <span class="string">"deploy@travis-ci.org"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">sed</span> <span class="bullet">-i''</span> <span class="string">"s~git@github.com:~https://$&#123;GITHUB_REPO_TOKEN&#125;@github.com/~"</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">deploy</span> <span class="string">&gt; /dev/null   # 通过 Hexo 的 deploy 命令部署博客</span></span><br></pre></td></tr></table></figure><p>更多使用技巧请主动参考「<a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html" target="_blank" rel="noopener">持续集成服务 Travis CI 教程</a>」。</p><p>那么，现在又有一个问题了：我们的目是自动部署到 GitHub Pages，用的是 <code>hexo deploy</code> 命令，但是 Hexo 又配置使用的是 Git push 来推送的（由 <code>hexo-deployer-git</code> 插件提供技术支持），那么 Travis CI 怎么有权限操作我的 GitHub 仓库呢！</p><h3 id="github-access-token"><a class="markdownIt-Anchor" href="#github-access-token"></a> GitHub Access Token</h3><blockquote><p>以下内容摘抄「<a href="https://blog.zthxxx.me/posts/Build-Hexo-Blog-by-Travis-CI/" target="_blank" rel="noopener">使用 Travis 自动构建 Hexo 到 GitHub</a>」</p></blockquote><p>GitHub 允许你通过<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">设置页面</a>添加一个「<strong>个人访问令牌（Personal access tokens）</strong>」，使用 Assess Token 将有权限通过 <code>https</code> 访问 GitHub Api 操作自己的仓库，可见这个就是我们需要的。</p><p>现在我们来添加一个 token，先进入自己 GitHub 的<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">设置页面</a>，点击 <code>Personal access tokens</code> → <code>Generate new token</code> 按钮，新建一个 token。</p><p><img src="https://i.loli.net/2019/01/18/5c40b37a1e67c.png" alt="Generate new token"></p><p>在权限设置中，我们只需要操作仓库，因此只需要打开仓库相关的权限就够了，权限开放应该满足最小原则，能少就少。设置好权限后点击生成按钮就会生成完毕并跳到 tokens 列表。</p><p><img src="https://i.loli.net/2019/01/18/5c40b999b24d4.png" alt="Personal access tokens"></p><p>现在就需要把刚生成的 Access Token 的值复制下来，<strong>注意，这个页面一旦刷新过了， token 就不能再显示了，没记住的只能重新生成一个了</strong>。</p><p><img src="https://i.loli.net/2019/01/18/5c40b95a99b08.png" alt="Copy personal access tokens"></p><p>嗯，现在 Access Token 也有了，能操作仓库了，那么，这个 token 应该放到哪里呢？</p><p>肯定不是放到代码里。。。</p><p>其实在 Travis CI 的项目设置界面就有提供设置环境变量，我们就应该把 token 放到那里。</p><p>回到我们 Travis CI 的<a href="https://travis-ci.org/y0ngb1n/y0ngb1n.github.io/settings" target="_blank" rel="noopener">博客项目设置页面</a>中，添加一个名为 <code>GITHUB_REPO_TOKEN</code> 的环境变量储存我们的 token，并记得要设置 <code>Display value in build log</code> 为 <code>OFF</code>，关闭变量的显示，否则等于公开了 token。</p><p><img src="https://i.loli.net/2019/01/18/5c40baab10d82.png" alt="添加 Token 环境变量"></p><p>现在在我们的执行脚本中就能使用 <code>$GITHUB_REPO_TOKEN</code> 访问 token 的环境变量了~</p><p>然后就是如何使用了。在 Hexo 部署前，我们应该把原来的部署仓库地址用带有 <code>Access Token</code> 的地址替换掉，于是在 <code>.travis.yml</code> 的 <code>hexo deploy</code> 命令前增加一条命令：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">sed</span> <span class="bullet">-i''</span> <span class="string">"s~git@github.com:~https://$&#123;GITHUB_REPO_TOKEN&#125;@github.com/~"</span> <span class="string">_config.yml</span></span><br></pre></td></tr></table></figure><p>这样，在执行时，这条命令就能自动替换到有权限操作的 token 地址了，并且也不会泄露或者影响本地的原始配置文件。</p><h3 id="构建失败子模块拉取失败"><a class="markdownIt-Anchor" href="#构建失败子模块拉取失败"></a> 构建失败：子模块拉取失败</h3><blockquote><p>本博客的第三方主题使用 <code>git submodule</code> 管理，可以翻看「<a href="https://y0ngb1n.github.io/a/2270d168.html">Hexo 搭建个人博客 #04 主题的安装与自定义样式</a>」</p></blockquote><p><img src="https://i.loli.net/2019/01/18/5c413aeb9dc2a.png" alt="Build History"></p><p>详细的构建日志可见 <a href="https://travis-ci.org/y0ngb1n/y0ngb1n.github.io/builds/481166397" target="_blank" rel="noopener">#1</a>，下面提取关键信息：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --init --recursive</span></span><br><span class="line">Submodule 'themes/skapp' (git@github.com:Mrminfive/hexo-theme-skapp.git) registered for path 'themes/skapp'</span><br><span class="line">Cloning into '/home/travis/build/y0ngb1n/y0ngb1n.github.io/themes/skapp'...</span><br><span class="line">Warning: Permanently added the RSA host key for IP address '192.30.253.113' to the list of known hosts.</span><br><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure><p><a href="https://docs.travis-ci.com/user/customizing-the-build/#git-submodules" target="_blank" rel="noopener">Travis CI 官方是默认支持 Git Submodules</a>，在拉取仓库时会默认拉取子模块的仓库，可以手动关闭该特性。</p><p>由于在使用 <code>git submodule</code> 时，添加了 <code>git@github.com</code> 的仓库地址，使用 <code>SSH</code> 的协议，所以拉取失败了，下面提供两个解决方案：</p><ol><li><a href="https://docs.travis-ci.com/user/ssh-known-hosts/" target="_blank" rel="noopener">Adding to SSH Known Hosts</a> - 官方提供的解决方案</li><li>手动修改 <code>.gitmodules</code> 里配置的仓库地址，将使用 <code>git</code> 协议的仓库链接改为 <code>https</code> 协议</li></ol><p>我这使用方案 2，修改为<code>https</code> 协议：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[submodule "themes/skapp"]</span></span><br><span class="line">    path = themes/skapp</span><br><span class="line">    url = https://github.com/Mrminfive/hexo-theme-skapp.git</span><br></pre></td></tr></table></figure><p>将修改推送至 GitHub 后，Travis CI 会进行构建，此时可见 <a href="https://travis-ci.org/y0ngb1n/y0ngb1n.github.io/builds/481168732" target="_blank" rel="noopener">#2</a> 成功构建了。</p><h2 id="在-readme-中查看构建状态"><a class="markdownIt-Anchor" href="#在-readme-中查看构建状态"></a> 在 README 中查看构建状态</h2><p>我们可以在 <code>README</code> 中添加 Travis CI 的构建状态，这样便可方便地查看项目在 Travis CI 上的构建状态。—— <a href="https://docs.travis-ci.com/user/status-images/" target="_blank" rel="noopener">Embedding Status Images</a>、<a href="https://shields.io/#/examples/build" target="_blank" rel="noopener">Shields.io</a></p><p><img src="https://i.loli.net/2019/01/18/5c4144df97e18.png" alt="README"></p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://docs.travis-ci.com/" target="_blank" rel="noopener">Travis CI Tutorial</a> - @Travis CI Docs</li><li><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html" target="_blank" rel="noopener">持续集成服务 Travis CI 教程</a> - @阮一峰</li><li><a href="http://lujiahao.tk/2018/06/27/Travis%20CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/" target="_blank" rel="noopener">Travis CI 持续集成 GitHub 个人博客</a> - @路家豪</li><li><a href="https://blog.zthxxx.me/posts/Build-Hexo-Blog-by-Travis-CI/" target="_blank" rel="noopener">使用 Travis 自动构建 Hexo 到 GitHub</a> - @zthxxx</li><li><a href="http://wuyuying.com/blog/archives/hexo-travis/" target="_blank" rel="noopener">开箱即用，Hexo 博客的 github+server 自动部署</a> - @伍酱</li><li><a href="https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/" target="_blank" rel="noopener">用 Travis CI 自动部署 Hexo 博客</a> - @Karl</li><li><a href="https://www.wshunli.com/posts/7dcaaf9e.html" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo 博客</a> - @wshunli</li><li><a href="https://juejin.im/post/5a1fa30c6fb9a045263b5d2a" target="_blank" rel="noopener">Hexo 遇上 Travis-CI：可能是最通俗易懂的自动发布博客图文教程</a> - @MichaelX</li><li><a href="https://baiyangliu.github.io/Hexo+Github+Travis-ci%E6%90%AD%E5%BB%BA%E7%A8%8B%E5%BA%8F%E5%91%98%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2.html" target="_blank" rel="noopener">Hexo+Github+Travis-ci 搭建程序员自己的博客</a> - @baiyangliu</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是-travis-ci&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是-travis-ci&quot;&gt;&lt;/a&gt; 什么是 Travis CI？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-c
      
    
    </summary>
    
    
      <category term="Hexo 搭建个人博客" scheme="https://y0ngb1n.github.io/categories/Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://y0ngb1n.github.io/tags/hexo/"/>
    
      <category term="个人博客" scheme="https://y0ngb1n.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="travis-ci" scheme="https://y0ngb1n.github.io/tags/travis-ci/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 搭建个人博客 #04 主题的安装与自定义样式</title>
    <link href="https://y0ngb1n.github.io/a/2270d168.html"/>
    <id>https://y0ngb1n.github.io/a/2270d168.html</id>
    <published>2018-12-19T22:00:00.000Z</published>
    <updated>2019-01-13T16:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-博客主题"><a class="markdownIt-Anchor" href="#hexo-博客主题"></a> Hexo 博客主题</h2><p>Hexo 默认的主题简陋？不太好看？就是不喜欢？</p><p>其实想要更换 Hexo 的主题是很简单的，Hexo 提供了可插拔式的主题机制，让我们可以轻松地更换博客主题。</p><p>可以在「<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方收集的主题列表</a>」挑选任意一个你喜欢的主题，总有一个适合你。</p><p>「<a href="https://github.com/Mrminfive/hexo-theme-skapp" target="_blank" rel="noopener">skapp</a>」这个主题挺不错的，接下来就参照这个主题的官网的教程进行安装使用。</p><h2 id="主题的安装skapp"><a class="markdownIt-Anchor" href="#主题的安装skapp"></a> 主题的安装（<a href="https://github.com/Mrminfive/hexo-theme-skapp/" target="_blank" rel="noopener">skapp</a>）</h2><blockquote><p>利用 Docker 快速搭建 node.js v8.9.3 环境</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name node8 --rm \</span><br><span class="line">  -v $(<span class="built_in">pwd</span>):/app -w /app \</span><br><span class="line">  -p 4000:4000 \</span><br><span class="line">  node:8.9.3 /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>在 windows 下各种报错，无奈转到 Linux 的机子上操作</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 skapp 主题 clone 至 themes/skapp 文件夹下</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Mrminfive/hexo-theme-skapp.git themes/skapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 skapp 主题指定的依赖</span></span><br><span class="line"><span class="comment"># 基于 2018-12-19，有个小坑：要使用 node.js v8.9.3 版本才能正常安装这些依赖，是由于 lunr 仍然在使用 nodejieba 2.2.5 引起的</span></span><br><span class="line">npm install --save hexo-autoprefixer hexo-filter-cleanup hexo-generator-feed hexo-generator-sitemap hexo-renderer-sass hexo-renderer-swig mamboer/lunr.js moment node-sass object-assign</span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><blockquote><p>🚩 能否使用 <code>Git Submodule</code> 进行管理第三方主题？</p></blockquote><p>上面直接 <code>clone</code> 了 <code>hexo-theme-skapp</code> 仓库于 <code>themes/skapp</code>，带有 <code>.git</code> 文件夹，git 识别为 Submodule，但没有产生外链到原 <code>hexo-theme-skapp</code> 仓库，只是个普通的文件夹。当我们把自己的博客仓库 <code>clone</code> 到本地后会发现 <code>themes/skapp</code> 只是一个普通的空文件夹 😧，主题不见了。</p><p><img src="https://dn-coding-net-production-pp.codehub.cn/ab7015e1-4a51-46dc-9dbd-bf726f9a56ae.png" alt="未使用子模块"></p><p>那能不能在执行 <code>clone</code> 操作时能直接拉取该主题仓库，而且该主题的源码不托管在我们的仓库中呢？可以的，这时就该使用 <code>git submodule</code> 了 👍。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先取消暂存 themes/skapp 目录</span></span><br><span class="line">git rm -r themes/skapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加子模块</span></span><br><span class="line">git submodule add git@github.com:Mrminfive/hexo-theme-skapp.git themes/skapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到新增 .gitmodules 文件</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p><code>.gitmodules</code> 描述了 Submodule 的远程仓库信息与本仓库的相对路径：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[submodule &quot;themes/skapp&quot;]</span><br><span class="line">path = themes/skapp</span><br><span class="line">url = git@github.com:Mrminfive/hexo-theme-skapp.git</span><br></pre></td></tr></table></figure><p><code>.git/config</code> 中也自动添加了 submodule 信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[submodule &quot;themes/skapp&quot;]</span><br><span class="line">url = git@github.com:Mrminfive/hexo-theme-skapp.git</span><br><span class="line">active = true</span><br></pre></td></tr></table></figure><p>以及产生了 <code>.git/modules</code> 文件夹，最后提交并推送到博客的远程仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">'chore: convert to skapp submodule'</span></span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><a href="https://github.com/y0ngb1n/y0ngb1n.github.io/tree/a296191cc1bf8e21a7616fb447a34b7bcc89839a/themes" target="_blank" rel="noopener">GitHub 仓库</a> 上会显示出当前所引入的子模块版本：</p><p><img src="https://dn-coding-net-production-pp.codehub.cn/e939f317-d9f0-46ea-8ff3-de27e8637fc4.png" alt="convert to skapp submodule"></p><p>当我们在其他地方进行仓库的 <code>git clone git@github.com:y0ngb1n/y0ngb1n.github.io.git</code> 时，发现 <code>themes/skapp</code> 是个空文件夹，意味着没有安装该主题。那么如何 <code>clone</code> 一个完整的仓库呢？只需如下操作即可：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一：使用  submodule init / update</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:y0ngb1n/y0ngb1n.github.io.git blog &amp;&amp; <span class="built_in">cd</span> blog</span><br><span class="line">git submodule init &amp;&amp; git submodule update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：添加 --recursive 参数</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:y0ngb1n/y0ngb1n.github.io.git --recursive</span><br></pre></td></tr></table></figure><p>当该第三方主题更新了，我们可以更新子模块：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule update --remote themes/skapp</span><br></pre></td></tr></table></figure><p>或者切换至 <code>themes/skapp</code> 目录下使用 <code>git</code> 命令切换到不同的历史版本，如果对子模块执行了相关操作后，会提示 <code>modified: themes/skapp (new commits)</code>：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch source</span><br><span class="line">Your branch is up to date with 'origin/source'.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   themes/skapp (new commits)</span><br></pre></td></tr></table></figure><p>然后按正常流程提交并推送到远程仓库即可。</p><h2 id="主题的配置"><a class="markdownIt-Anchor" href="#主题的配置"></a> 主题的配置</h2><p>主题的相关配置可以参考「<a href="https://github.com/Mrminfive/hexo-theme-skapp/blob/master/README-cn.md" target="_blank" rel="noopener">skapp 官方说明</a>」，可以设置：菜单、博客信息、联系方式、外部链接等。</p><blockquote><p>header 的背景图（随机图）</p></blockquote><p>使用了「<a href="https://spencerwoo.com/" target="_blank" rel="noopener">Spencer Woo</a>」家提供的 <a href="https://api.spencerwoo.com" target="_blank" rel="noopener">https://api.spencerwoo.com</a> 接口，可随机不同的图片，在 <code>_config.yml</code> 中设置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## header 的背景图</span></span><br><span class="line"><span class="attr">header_cover:</span> <span class="attr">https://api.spencerwoo.com</span></span><br></pre></td></tr></table></figure><blockquote><p>开启「<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>」</p></blockquote><p>skapp 主题已经集成了「<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>」，但默认是关闭的，只需在 <code>_config.yml</code> 中开启即可：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Busuanzi</span></span><br><span class="line"><span class="attr">busuanzi:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/12/19/5c1a4cec018b2.png" alt="Skapp Hexo 主题"></p><p>欢迎围观 <a href="https://y0ngb1n.github.io/">我的博客 https://y0ngb1n.github.io/</a> 👋</p><h2 id="自定义样式"><a class="markdownIt-Anchor" href="#自定义样式"></a> 自定义样式</h2><blockquote><p>待续…</p></blockquote><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方收集的主题列表</a></li><li><a href="https://github.com/Mrminfive/hexo-theme-skapp/blob/master/README-cn.md" target="_blank" rel="noopener">hexo-theme-skapp 官方说明</a></li><li><a href="https://spencerwoo.com/2018/07/30/SimpleAPI/" target="_blank" rel="noopener">Simple Deskop API | 一喵一图</a></li><li><a href="https://openlogos.org/" target="_blank" rel="noopener">OPEN LOGOS</a></li><li><a href="https://www.git-scm.com/docs/gitmodules" target="_blank" rel="noopener">Git - gitmodules Documentation</a></li><li><a href="https://www.git-scm.com/book/en/v2/Git-Tools-Submodules" target="_blank" rel="noopener">Git Tools - Submodules</a></li><li><a href="https://segmentfault.com/a/1190000003076028" target="_blank" rel="noopener">使用 Git Submodule 管理子模块</a></li><li><a href="https://segmentfault.com/a/1190000009928515" target="_blank" rel="noopener">关于 git-submodule 的一些基本操作</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo-博客主题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hexo-博客主题&quot;&gt;&lt;/a&gt; Hexo 博客主题&lt;/h2&gt;
&lt;p&gt;Hexo 默认的主题简陋？不太好看？就是不喜欢？&lt;/p&gt;
&lt;p&gt;其实想要更换 Hexo 的主题是很简单
      
    
    </summary>
    
    
      <category term="Hexo 搭建个人博客" scheme="https://y0ngb1n.github.io/categories/Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://y0ngb1n.github.io/tags/hexo/"/>
    
      <category term="个人博客" scheme="https://y0ngb1n.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="git-submodule" scheme="https://y0ngb1n.github.io/tags/git-submodule/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://y0ngb1n.github.io/a/4a17b156.html"/>
    <id>https://y0ngb1n.github.io/a/4a17b156.html</id>
    <published>2018-12-19T00:00:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<p>Hi！这是我的个人博客，利用 Hexo 开源框架搭建而成。致谢。</p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hi！这是我的个人博客，利用 Hexo 开源框架搭建而成。致谢。&lt;/p&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very 
      
    
    </summary>
    
    
    
      <category term="hello-world" scheme="https://y0ngb1n.github.io/tags/hello-world/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 搭建个人博客 #03 框架的基本结构与打包后的文件介绍</title>
    <link href="https://y0ngb1n.github.io/a/b821c4ca.html"/>
    <id>https://y0ngb1n.github.io/a/b821c4ca.html</id>
    <published>2018-12-15T22:00:00.000Z</published>
    <updated>2022-11-19T15:46:29.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构"></a> 目录结构</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy_git</span><br><span class="line">├── node_modules</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── source</span><br><span class="line">│   └── _posts</span><br><span class="line">│       └── hello-world.md</span><br><span class="line">├── themes</span><br><span class="line">├── .gitignore</span><br><span class="line">├── _config.yml</span><br><span class="line">├── db.json</span><br><span class="line">├── package.json</span><br><span class="line">└── package-lock.json</span><br></pre></td></tr></table></figure><h3 id="deploy_git"><a class="markdownIt-Anchor" href="#deploy_git"></a> .deploy_git</h3><p>在输入 <code>hexo d</code> 部署到 GitHub 后自动创建。该目录的结构和 <code>public</code> 目录基本一致（不一致的情况是由于重新生成，但是没有发布站点造成，此时 <code>public</code> 内容新于 <code>.deploy_git</code> 内容）。</p><h3 id="node_modules"><a class="markdownIt-Anchor" href="#node_modules"></a> node_modules</h3><p>存放安装的 Hexo 扩展，都是相应的 node 依赖模块。</p><h3 id="public"><a class="markdownIt-Anchor" href="#public"></a> public</h3><p>在执行 <code>hexo g</code> 命令时，Hexo 程序会编译 <code>source</code>、<code>theme</code> 目录，生成的静态网页内容目录就是 <code>piblic</code>。</p><p>生成好的 <code>public</code> 文件夹内容就可以直接当成静态网站进行部署。</p><p>在执行 <code>hexo d</code> 命令时，会将 <code>piblic</code> 目录内容复制到 <code>.deploy_git</code> 目录。</p><h3 id="scaffolds"><a class="markdownIt-Anchor" href="#scaffolds"></a> scaffolds</h3><p><code>scaffolds</code> 是“脚手架、骨架”的意思，当你新建一篇文章（<code>hexo new 'title'</code>）的时候，Hexo 是根据这个目录下的文件进行构建的。</p><h3 id="source"><a class="markdownIt-Anchor" href="#source"></a> source</h3><p>存放用户资源的地方。</p><h4 id="_posts"><a class="markdownIt-Anchor" href="#_posts"></a> _posts</h4><p>存放博客文章的地方，其中的 <code>markdown</code> 文件、HTML 文件、org 文件等会被解析并放到 <code>public</code> 文件夹，发布到站点。</p><h4 id="其它以-_下划线开头的文件-文件夹"><a class="markdownIt-Anchor" href="#其它以-_下划线开头的文件-文件夹"></a> 其它以 _（下划线）开头的文件 / 文件夹</h4><p>将会被忽略。因此可以在 <code>source</code> 目录下创建  <code>_drafts</code> 目录用于存放未完成的草稿，其中内容不会发布到网站。</p><h4 id="其它非-_-开头的文件-文件夹"><a class="markdownIt-Anchor" href="#其它非-_-开头的文件-文件夹"></a> 其它非 _ 开头的文件 / 文件夹</h4><p>会被拷贝到 <code>public</code> 目录并上传到站点。</p><ul><li>可以创建 <code>img</code> 目录来存放在博客引用到的图片等。</li><li>要添加新的页面（例如 <code>about</code>），执行 <code>hexo new page PageName</code> 命令即会在 <code>source</code> 中自动新建子目录 <code>PageName</code> 。</li><li><code>favicon.ico</code> 在主题配置文件中引用 <code>/favicon.ico</code> 来设置站点的页面图标。</li></ul><h3 id="themes"><a class="markdownIt-Anchor" href="#themes"></a> themes</h3><p>网站的主题目录。默认安装 <code>landscape</code> 主题，你可以安装新主题到 <code>themes</code> 目录，也可以自己新建主题。</p><h3 id="_configyml"><a class="markdownIt-Anchor" href="#_configyml"></a> _config.yml</h3><p>全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数。</p><h3 id="dbjson"><a class="markdownIt-Anchor" href="#dbjson"></a> db.json</h3><p>自动生成的一个文件 JSON 文件，可以对博客的文件进行管理查找的，可以忽略。</p><h3 id="packagejson"><a class="markdownIt-Anchor" href="#packagejson"></a> package.json</h3><p>Hexo 框架的参数和所有依赖的插件。</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://www.jianshu.com/p/17d55d420d94" target="_blank" rel="noopener">Hexo 的目录结构</a></li><li><a href="http://syxiaqj.github.io/2014/02/18/structure-of-hexo/" target="_blank" rel="noopener">Hexo 的目录结构及作用</a></li><li><a href="https://yuchen-lea.github.io/2016-01-18-hexo-dir-struct/" target="_blank" rel="noopener">Hexo 目录结构小探</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#目录结构&quot;&gt;&lt;/a&gt; 目录结构&lt;/h2&gt;
&lt;figure class=&quot;highlight console&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
      <category term="Hexo 搭建个人博客" scheme="https://y0ngb1n.github.io/categories/Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://y0ngb1n.github.io/tags/hexo/"/>
    
      <category term="个人博客" scheme="https://y0ngb1n.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
